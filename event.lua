local band = bit32.band
local math_atan2, math_ceil, math_cos, math_deg, math_floor, math_max, math_min, math_random, math_sin = math.atan2, math.ceil, math.cos, math.deg, math.floor, math.max, math.min, math.random, math.sin
local next = next
local setmetatable, str_format, str_gmatch, str_gsub, str_match, str_sub = setmetatable, string.format, string.gmatch, string.gsub, string.match, string.sub
local tbl_concat, time, tbl_remove, tonumber, tbl_unpack = table.concat, os.time, table.remove, tonumber, table.unpack

--[[ Module Info ]]--
local module = {
	name = "va22",
	formalName = "To cupid or not to cupid?",

	team = {
		developer = "Bolodefchoco#0015",
		artist = { "Santa#0095", "Chibi#0095", "Albisnoka#0000", "Karasu#0010" },
		creative = "Eremia#2246"
	},

	reward = {
		title = {
			willbriemine = { "evt_valentines_cupid_title_537", 0x01 },
			heartbreaker = { "evt_valentines_cupid_title_536", 0x02 }
		},
		badge = { "evt_valentines_cupid_badge", 0x04 },
		fur = "evt_valentines_cupid_skin"
	},

	oneCupidPerNPlayers = 10,
	nHeartsPerCupid = 2,

	removePopupAfterNSeconds = 3.5 * 1000,

	totalPotionsForReward = 50,
	totalLoveLettersForReward = 25,
	totalLinkedSoulsForReward = 25,

	minPlayers = 5,
	maxPlayers = 60,

	time = 2 * 60,
	maps = {
		[1] = [[<C><P name="Stone Garden" author="Zetdey#3845" F="1" L="1200" MEDATA=";;;;-0;0:::1-" /><Z><S><S L="32" H="32" X="766" Y="341" T="10" P="0,0,0.3,0,-45,0,0,0" /><S L="138" H="10" X="1181" Y="239" T="1" P="0,0,0,0.2,-90,0,0,0" /><S L="160" H="10" X="549" Y="379" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="160" H="10" X="709" Y="347" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="180" H="10" X="959" Y="360" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="160" H="20" X="1191" Y="249" T="10" P="0,0,0.3,0,-90,0,0,0" /><S L="160" H="51" X="549" Y="403" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="160" H="70" X="709" Y="381" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="160" H="10" X="1121" Y="267" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="200" H="70" X="969" Y="394" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="240" H="51" X="209" Y="375" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="30" H="186" X="1003" Y="240" T="9" P="0,0,0,0,0,0,0,0" /><S L="200" H="10" X="289" Y="379" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="160" H="140" X="1121" Y="336" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="200" H="51" X="289" Y="403" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="32" H="32" X="521" Y="255" T="10" P="0,0,0.3,0,-45,0,0,0" /><S L="280" H="10" X="226" Y="116" T="18" P="0,0,0.3,0.2,180,0,0,0" /><S L="200" H="10" X="217" Y="216" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="30" H="182" X="42" Y="309" T="9" P="0,0,0,0,0,0,0,0" /><S L="32" H="32" X="361" Y="239" T="10" P="0,0,0.3,0,135,0,0,0" /><S L="240" H="24" X="237" Y="227" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="160" H="48" X="305" Y="215" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="200" H="10" X="802" Y="203" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="257" H="10" X="831" Y="224" T="18" P="0,0,0.3,0.2,180,0,0,0" /><S L="160" H="10" X="1121" Y="151" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="120" H="24" X="557" Y="267" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="32" H="32" X="936" Y="178" T="10" P="0,0,0.3,0,-45,0,0,0" /><S L="160" H="24" X="782" Y="214" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="30" H="76" X="659" Y="242" T="9" P="0,0,0,0,0,0,0,0" /><S L="32" H="32" X="79" Y="118" T="10" P="0,0,0.3,0,135,0,0,0" /><S L="120" H="10" X="557" Y="135" T="18" P="0,0,0.3,0.2,180,0,0,0" /><S L="160" H="48" X="879" Y="202" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="160" H="20" X="1121" Y="160" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="200" H="10" X="266" Y="95" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="30" H="146" X="431" Y="167" T="9" P="0,0,0,0,0,0,0,0" /><S L="120" H="24" X="557" Y="125" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="120" H="10" X="767" Y="84" T="18" P="0,0,0.3,0.2,360,0,0,0" /><S L="160" H="24" X="286" Y="106" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="120" H="10" X="1141" Y="68" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="160" H="48" X="136" Y="94" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="120" H="24" X="767" Y="95" T="10" P="0,0,0.3,0,0,0,0,0" /><S L="120" H="20" X="1141" Y="77" T="10" P="0,0,0.3,0,0,0,0,0" /><S X="832" L="1816" o="6a7495" H="585" c="4" Y="693" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S X="-292" L="1816" o="6a7495" H="585" c="4" Y="395" T="12" P="0,0,0.3,0.2,90,0,0,0" /></S><D><P P="0,1" Y="389" T="154" X="34" /><P P="0,1" Y="53" T="217" X="1165" /><P P="0,0" Y="81" T="156" X="310" /><P P="0,0" Y="388" T="154" X="387" /><DC Y="131" X="1146" /><P P="0,0" Y="384" T="154" X="815" /><P P="0,1" Y="191" T="217" X="758" /><P P="0,1" Y="202" T="217" X="173" /><P P="0,0" Y="70" T="156" X="746" /><P P="0,1" Y="365" T="217" X="592" /><P P="0,0" Y="345" T="217" X="912" /><P P="0,0" Y="135" T="155" X="1130" /><P P="0,1" Y="340" T="156" X="143" /><P P="0,1" Y="114" T="253" X="519" /><P P="0,0" Y="342" T="253" X="650" /><P P="0,0" Y="190" T="254" X="234" /><P P="0,0" Y="63" T="254" X="1091" /><P P="0,1" Y="260" T="254" X="1124" /><P P="0,0" Y="352" T="250" X="184" /><P P="0,1" Y="178" T="250" X="889" /><P P="0,0" Y="106" T="220" X="863" /><DS Y="359" X="554" /></D><O><O C="11" Y="237" X="1056" P="0" /><O C="11" Y="231" X="576" P="0" /><O C="11" Y="320" X="637" P="0" /><O C="11" Y="189" X="201" P="0" /><O C="11" Y="326" X="281" P="0" /><O C="11" Y="66" X="244" P="0" /><O C="11" Y="86" X="586" P="0" /><O C="11" Y="177" X="743" P="0" /><O C="11" Y="122" X="1054" P="0" /><O C="22" Y="45" X="1094" P="0" /><O C="22" Y="48" X="75" P="0" /><O C="22" Y="169" X="358" P="0" /><O C="22" Y="55" X="802" P="0" /><O C="14" Y="155" X="833" P="0" /><O C="14" Y="122" X="1098" P="0" /><O C="14" Y="66" X="349" P="0" /><O C="22" Y="326" X="164" P="0" /><O C="14" Y="331" X="949" P="0" /></O><L /></Z></C>]],
		[2] = [[<C><P name="Widow's Den" author="Zetdey#3845" F="1" MEDATA=";;;;-0;0::0,1,2,3:1-" /><Z><S><S L="10" H="340" X="5" Y="211" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="24" H="24" X="212" Y="263" T="1" P="0,0,0,0.2,45,0,0,0" /><S L="160" H="18" X="293" Y="271" T="5" P="0,0,0.3,0.2,0,0,0,0" /><S L="228" H="16" X="125" Y="51" T="15" P="0,0,0,0,0,0,0,0" /><S L="161" H="111" X="169" Y="398" T="1" P="0,0,0,0.2,45,0,0,0" /><S L="282" H="124" X="357" Y="439" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S H="37" L="180" o="f4c9f9" X="671" c="3" Y="388" T="12" P="1,999999,9999,0,0,1,0,0" /><S L="240" H="100" X="200" Y="432" T="5" P="0,0,0.3,0.2,45,0,0,0" /><S L="10" H="66" X="390" Y="295" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="28" H="28" X="779" Y="369" T="1" P="0,0,0,0.2,45,0,0,0" /><S L="50" H="18" X="26" Y="154" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="24" H="24" X="111" Y="201" T="5" P="0,0,0.3,0.2,45,0,0,0" /><S L="100" H="18" X="301" Y="153" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="42" H="18" X="779" Y="378" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="66" H="18" X="381" Y="295" T="5" P="0,0,0.3,0.2,-90,0,0,0" /><S H="142" L="38" o="f4c9f9" X="688" c="3" Y="223" T="12" P="1,999999,9999,0,0,1,0,0" /><S L="24" H="24" X="549" Y="146" T="1" P="0,0,0,0.2,45,0,0,0" /><S L="10" H="193" X="567" Y="376" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="16" H="16" X="688" Y="172" T="5" P="0,0,0.3,0.2,45,0,0,0" /><S L="24" H="24" X="481" Y="291" T="5" P="0,0,0.3,0.2,45,0,0,0" /><S L="110" H="12" X="683" Y="228" T="18" P="0,0,0.3,0.2,-90,0,0,0" /><S L="222" H="124" X="689" Y="449" T="18" P="0,0,0.3,0.2,180,0,0,0" /><S L="110" H="12" X="693" Y="228" T="18" P="0,0,0.3,0.2,90,0,0,0" /><S L="122" H="20" X="577" Y="340" T="18" P="0,0,0.3,0.2,90,0,0,0" /><S L="92" H="20" X="688" Y="289" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="150" H="224" X="75" Y="413" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="10" H="70" X="361" Y="180" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="122" H="18" X="506" Y="155" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="60" H="20" X="790" Y="379" T="18" P="0,0,0.3,0.2,-90,0,0,0" /><S L="38" H="12" X="688" Y="153" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="70" H="18" X="352" Y="180" T="18" P="0,0,0.3,0.2,270,0,0,0" /><S L="24" H="24" X="444" Y="162" T="5" P="0,0,0.3,0.2,45,0,0,0" /><S L="240" H="14" X="119" Y="36" T="4" P="0,0,9999,0,180,0,0,0" /><S L="73" H="69" X="721" Y="8" T="4" P="0,0,20,0.2,50,0,0,0" /><S H="362" L="983" o="6a7495" X="424" c="4" Y="582" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="241" H="34" X="121" Y="17" T="18" P="0,0,0.3,0.2,-180,0,0,0" /><S L="58" H="10" X="494" Y="29" T="1" P="0,0,0,0.2,90,0,0,0" /><S L="58" H="10" X="244" Y="30" T="18" P="0,0,0.3,0.2,-90,0,0,0" /><S L="81" H="69" X="759" Y="24" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="241" H="58" X="369" Y="30" T="18" P="0,0,0.3,0.2,-180,0,0,0" /><S L="58" H="10" X="490" Y="30" T="18" P="0,0,0.3,0.2,90,0,0,0" /><S L="24" H="24" X="617" Y="87" T="5" P="0,0,0.3,0.2,45,0,0,0" /><S L="81" H="58" X="760" Y="22" T="18" P="0,0,0.3,0.2,-180,0,0,0" /><S P="0,0,0.3,0.2,-90,0,0,0" L="3000" o="6a7495" X="-164" c="3" N="" Y="1491" T="12" H="328" /><S L="81" H="58" X="715" Y="1" T="18" P="0,0,0.3,0.2,-130,0,0,0" /><S L="41" H="18" X="185" Y="153" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S H="328" L="3000" o="6a7495" X="456" c="1" Y="-163" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S H="10" L="10" o="ffffff" X="673" c="4" Y="378" T="12" P="0,0,9999,0,45,0,0,0" /><S H="10" L="10" o="f4c9f9" X="669" c="4" Y="378" T="12" P="0,0,9999,0,45,0,0,0" /><S H="362" L="983" o="6a7495" X="981" c="4" Y="201" T="12" P="0,0,0.3,0.2,-90,0,0,0" /></S><D><P P="0,1" Y="174" T="148" X="819" /><P P="0,0" Y="143" T="254" X="260" /><P P="0,0" Y="277" T="254" X="651" /><P P="0,0" Y="378" T="163" X="221" /><P P="0,0" Y="301" T="163" X="87" /><P P="0,0" Y="158" T="159" X="528" /><P P="0,0" Y="209" T="160" X="528" /><DS Y="363" X="269" /><P P="1,0" Y="402" T="132" X="1" /><P X="842" Y="459" T="148" P="0,0" /><P P="0,0" Y="254" T="148" X="-29" /><DC Y="130" X="353" /></D><O><O C="0" Y="79" P="180,0" X="124" /><O C="0" Y="79" P="180,0" X="164" /><O C="0" Y="79" P="180,0" X="204" /><O C="0" Y="79" P="180,0" X="84" /><O C="0" Y="79" P="180,0" X="44" /><O C="11" Y="126" P="0" X="288" /><O C="11" Y="126" X="460" P="0" /><O C="11" Y="241" X="367" P="0" /><O C="11" Y="279" P="0" X="120" /><O C="11" Y="353" X="367" P="0" /><O C="22" Y="126" P="0" X="688" /><O C="22" Y="126" X="185" P="0" /><O C="14" Y="241" X="288" P="0" /><O C="14" Y="256" P="0" X="572" /><O C="14" Y="126" P="0" X="32" /><O C="22" Y="279" P="0" X="40" /><O C="22" Y="353" X="477" P="0" /><O C="14" Y="353" P="0" X="288" /><O C="14" Y="126" X="512" P="0" /></O><L><JP AXIS="1,0" M2="23" MV="Infinity,-10" M1="6" /><JR M1="6" M2="28" /><JP AXIS="0,1" M2="24" MV="Infinity,8" M1="15" /><JR M1="15" M2="27" /></L></Z></C>]],
		[3] = [[<C><P name="Marble Waterfalls" author="Zetdey#3845" F="1" L="1200" MEDATA=";;;1,1;-0;0::0,1:1-" /><Z><S><S P="0,0,0.3,0.2,0,0,0,0" L="286" o="ffcafe" X="193" Y="378" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="286" o="ffcafe" X="321" Y="408" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="286" o="ffcafe" X="361" Y="408" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="286" o="ffcafe" X="740" Y="408" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="80" o="ffcafe" X="764" Y="378" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="80" o="ffcafe" X="843" Y="344" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="953" Y="361" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="80" o="ffcafe" X="1160" Y="361" T="12" H="78" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="525" Y="247" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="482" Y="223" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="200" o="ffcafe" X="841" Y="191" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="924" Y="214" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="140" Y="142" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="206" Y="165" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="130" o="ffcafe" X="638" Y="106" T="12" H="34" /><S P="0,0,0.3,0.2,0,0,0,0" L="100" o="ffcafe" X="415" Y="88" T="12" H="34" /><S P="0,0,0.3,0.2,0,0,0,0" L="80" o="ffcafe" X="1061" Y="121" T="12" H="34" /><S P="0,0,0.3,0.2,0,0,0,0" L="180" o="ffcafe" X="973" Y="92" T="12" H="24" /><S P="0,0,0.3,0.2,0,0,0,0" L="120" o="ffcafe" X="191" Y="262" T="12" H="24" /><S L="24" H="110" X="1082" Y="256" T="9" P="0,0,0,0,0,0,0,0" /><S L="24" H="76" X="843" Y="118" T="9" P="0,0,0,0,0,0,0,0" /><S L="24" H="90" X="668" Y="279" T="9" P="0,0,0,0,0,0,0,0" /><S L="24" H="146" X="365" Y="283" T="9" P="0,0,0,0,0,0,0,0" /><S L="24" H="96" X="519" Y="135" T="9" P="0,0,0,0,0,0,0,0" /><S H="63" L="458" X="277" c="2" Y="400" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="63" L="450" X="820" c="2" Y="400" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="32" L="322" X="883" c="2" Y="355" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="120" X="191" c="2" Y="262" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="180" X="206" c="2" Y="165" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="181" X="140" c="2" Y="141" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="181" X="482" c="2" Y="223" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="181" X="526" c="2" Y="247" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="202" X="841" c="2" Y="191" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="180" X="924" c="2" Y="214" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="24" L="180" X="973" c="2" Y="92" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="34" L="80" X="1061" c="2" Y="121" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="34" L="131" X="638" c="2" Y="106" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="34" L="100" X="414" c="2" Y="88" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="78" L="80" X="1161" c="2" Y="361" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="20" L="242" X="923" c="2" Y="332" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="16" L="82" X="842" c="2" Y="313" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="30" L="288" X="193" c="2" Y="354" T="8" P="0,0,0.3,0.2,0,0,0,0" /><S H="351" L="1384" o="6a7495" X="665" c="4" Y="575" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S X="1375" L="1384" o="6a7495" H="351" c="4" Y="284" T="12" P="0,0,0.3,0.2,-90,0,0,0" /><S H="351" L="1384" o="6a7495" X="-175" c="4" Y="201" T="12" P="0,0,0.3,0.2,-90,0,0,0" /><S X="539" L="1384" o="6a7495" H="351" c="4" Y="-175" T="12" P="0,0,0.3,0.2,0,0,0,0" /></S><D><P X="547" Y="402" T="163" P="0,0" /><P X="1080" Y="401" T="163" P="0,1" /><P X="880" Y="179" T="163" P="0,1" /><P X="635" Y="89" T="163" P="0,1" /><P X="167" Y="129" T="163" P="0,1" /><P X="451" Y="211" T="162" P="0,0" /><P X="261" Y="338" T="162" P="0,0" /><P X="949" Y="323" T="162" P="0,1" /><P X="1094" Y="103" T="71" P="0,0" /><P X="1159" Y="319" T="75" P="0,0" /><P X="609" Y="234" T="71" P="0,0" /><P X="136" Y="249" T="71" P="0,0" /><P X="371" Y="69" T="71" P="0,0" /><P X="463" Y="368" T="71" P="0,0" /><DS Y="355" X="612" /><DC Y="164" X="762" /></D><O><O C="14" X="174" Y="228" P="0" /><O C="14" X="1173" Y="299" P="0" /><O C="14" X="553" Y="189" P="0" /><O C="11" X="91" Y="315" P="0" /><O C="11" X="423" Y="344" P="0" /><O C="11" X="842" Y="283" P="0" /><O C="11" X="794" Y="153" P="0" /><O C="11" X="413" Y="189" P="0" /><O C="11" P="0" Y="107" X="62" /><O C="11" X="452" Y="48" P="0" /><O C="11" P="0" Y="61" X="973" /><O C="22" X="683" Y="65" P="0" /><O C="22" X="212" Y="107" P="0" /><O C="22" P="0" Y="61" X="1049" /><O C="14" Y="315" P="0" X="274" /><O C="14" Y="317" X="744" P="0" /><O C="14" Y="178" P="0" X="974" /><O C="14" Y="128" X="267" P="0" /></O><L><JD c="DE9AD5,250,0.28,0" P1="-46.99,122" P2="1331.01,122" /><JD c="DE9AD5,250,0.28,0" P1="-66.99,372" P2="1311.01,372" /></L></Z></C>]],
		[4] = [[<C><P name="Garden of Love" author="Bluevintrix#6860" MEDATA=";;;;-0;0:::1-" F="1" /><Z><S><S L="55" X="556" H="36" Y="397" T="18" P="0,0,0.3,0.2,-45,0,0,0" /><S L="90" X="98" H="45" Y="368" T="18" P="0,0,0.3,0.2,40,0,0,0" /><S L="10" X="388" H="19" Y="128" T="4" P="0,0,20,0.2,-10,0,0,0" /><S L="10" X="329" H="38" Y="91" T="4" P="0,0,20,0.2,30,0,0,0" /><S L="10" X="652" H="19" Y="80" T="4" P="0,0,20,0.2,15,0,0,0" /><S L="10" X="536" H="35" Y="252" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="10" X="615" H="19" Y="148" T="4" P="0,0,20,0.2,20,0,0,0" /><S L="10" X="40" H="38" Y="91" T="4" P="0,0,20,0.2,30,0,0,0" /><S L="35" X="745" H="107" Y="265" T="9" P="0,0,0,0,0,0,0,0" /><S L="120" X="395" H="20" Y="390" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="40" X="267" H="80" Y="374" T="18" P="0,0,0.3,0.2,15,0,0,0" /><S L="120" X="140" H="21" Y="390" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="40" H="174" Y="410" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="602" H="174" Y="452" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="10" X="222" H="19" Y="285" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="80" X="681" H="174" Y="425" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="760" H="174" Y="406" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="120" X="279" H="21" Y="265" T="18" P="0,0,0.3,0.2,-20,0,0,0" /><S L="120" X="392" H="21" Y="245" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="40" X="26" H="40" Y="76" T="18" P="0,0,0.3,0.2,46,0,0,0" /><S L="40" X="315" H="40" Y="76" T="18" P="0,0,0.3,0.2,46,0,0,0" /><S L="80" X="572" H="21" Y="232" T="18" P="0,0,0.3,0.2,-15,0,0,0" /><S L="80" X="577" H="21" Y="251" T="18" P="0,0,0.3,0.2,165,0,0,0" /><S L="120" X="558" H="21" Y="127" T="18" P="0,0,0.3,0.2,20,0,0,0" /><S L="120" X="448" H="21" Y="117" T="18" P="0,0,0.3,0.2,-10,0,0,0" /><S L="80" X="692" H="21" Y="90" T="18" P="0,0,0.3,0.2,15,0,0,0" /><S L="80" X="764" H="21" Y="90" T="18" P="0,0,0.3,0.2,-15,0,0,0" /><S L="10" X="315" H="19" Y="176" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="40" X="746" H="36" Y="193" T="18" P="0,0,0.3,0.2,-90,0,0,0" /><S L="40" X="782" H="36" Y="192" T="18" P="0,0,0.3,0.2,90,0,0,0" /><S L="120" X="137" H="21" Y="145" T="18" P="0,0,0.3,0.2,10,0,0,0" /><S L="120" X="255" H="21" Y="166" T="18" P="0,0,0.3,0.2,10,0,0,0" /><S P="0,0,20,0.2,0,0,0,0" L="12" o="324650" H="10" Y="258" T="13" m="" X="48" /><S P="0,0,20,0.2,0,0,0,0" L="12" o="324650" H="10" Y="260" T="13" m="" X="27" /><S P="0,0,20,0.2,0,0,0,0" L="12" o="324650" H="10" Y="265" T="13" m="" X="41" /><S P="0,0,20,0.2,0,0,0,0" L="10" X="38" Y="299" T="4" m="" H="50" /><S L="40" X="143" H="40" Y="250" T="18" P="0,0,0.3,0.2,46,0,0,0" /><S P="0,0,0,0.9,0,0,0,0" L="40" X="37" Y="250" T="2" m="" H="10" /></S><D><P X="38" Y="326" T="75" P="0,0" /><P X="23" Y="66" T="244" P="0,0" /><P X="267" Y="500" T="148" P="0,0" /><P X="761" Y="175" T="69" P="0,0" /><P X="487" Y="194" T="219" P="0,0" /><P X="312" Y="66" T="244" P="0,0" /><DC Y="222" X="393" /><P X="273" Y="30" T="220" P="0,0" /><P X="204" Y="390" T="217" P="0,0" /><P X="305" Y="390" T="217" P="0,0" /><P X="485" Y="390" T="217" P="0,0" /><P X="330" Y="240" T="244" P="0,0" /><P X="105" Y="135" T="244" P="0,1" /><P X="305" Y="170" T="241" P="0,0" /><P X="153" Y="385" T="241" P="0,0" /><P X="728" Y="95" T="241" P="0,0" /><P X="141" Y="235" T="132" P="0,0" /><P X="500" Y="105" T="244" P="0,1" /><P X="431" Y="380" T="71" P="0,0" /><P X="364" Y="380" T="71" P="0,0" /><DS Y="367" X="399" /><P P="0,0" Y="340" T="255" X="685" /><P P="0,0" Y="389" T="243" X="627" /><P X="690" Y="364" T="243" P="0,1" /></D><O><O C="11" Y="220" P="0" X="362" /><O C="11" Y="155" X="762" P="0" /><O C="11" Y="367" X="186" P="0" /><O C="11" Y="360" P="0" X="446" /><O C="11" Y="120" P="0" X="145" /><O C="11" Y="60" P="0" X="780" /><O C="14" Y="210" P="0" X="143" /><O C="22" Y="143" P="0" X="268" /><O C="22" Y="95" P="0" X="545" /><O C="22" Y="345" P="0" X="582" /><O C="14" Y="205" P="0" X="566" /><O C="14" Y="60" P="0" X="685" /><O C="14" Y="40" X="11" P="0" /><O C="11" Y="300" P="0" X="782" /></O><L /></Z></C>]],
		[5] = [[<C><P name="Pink shapes" author="Bluevintrix#6860" MEDATA=";;;;-0;0:::1-" /><Z><S><S L="10" o="561f0a" X="645" H="19" Y="155" T="12" P="0,0,20,0.2,0,0,0,0" /><S L="115" o="ffb3e0" X="537" H="20" Y="190" T="12" P="0,0,0.3,0.2,-40,0,0,0" /><S L="70" o="ffb3e0" X="610" H="20" Y="155" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="104" o="ffb3e0" X="815" H="100" Y="370" T="12" P="0,0,0.3,0.2,35,0,0,0" /><S L="115" o="ffb3e0" X="530" H="20" Y="393" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="104" o="ffb3e0" X="756" H="100" Y="426" T="12" P="0,0,0.3,0.2,55,0,0,0" /><S P="0,0,20,0.2,0,0,0,0" L="10" o="561f0a" H="77" Y="265" T="12" X="693" /><S L="104" o="ffb3e0" X="-2" H="100" Y="134" T="12" P="0,0,0.3,0.2,45,0,0,0" /><S L="104" o="ffb3e0" X="1" H="100" Y="333" T="12" P="0,0,0.3,0.2,45,0,0,0" /><S L="40" o="ffb3e0" X="445" H="40" Y="325" T="12" P="0,0,0.3,0.2,45,0,0,0" /><S L="104" o="ffb3e0" X="371" H="100" Y="395" T="12" P="0,0,0.3,0.2,35,0,0,0" /><S L="115" o="ffb3e0" X="472" H="20" Y="353" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="115" o="ffb3e0" X="501" H="20" Y="373" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="115" o="ffb3e0" X="415" H="100" Y="375" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S P="0,0,0.3,0.2,0,0,0,0" L="118" o="ffb3e0" H="20" Y="294" T="12" X="634" /><S L="100" o="ffb3e0" X="118" H="20" Y="392" T="12" P="0,0,0.3,0.2,-60,0,0,0" /><S L="115" o="ffb3e0" X="629" H="20" Y="263" T="12" P="0,0,0.3,0.2,-30,0,0,0" /><S L="100" o="ffb3e0" X="222" H="20" Y="391" T="12" P="0,0,0.3,0.2,60,0,0,0" /><S L="70" o="ffb3e0" X="170" H="20" Y="353" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="10" o="561f0a" X="274" H="18" Y="102" T="12" P="0,0,20,0.2,0,0,0,0" /><S L="10" o="561f0a" X="478" H="38" Y="105" T="12" P="0,0,20,0.2,30,0,0,0" /><S P="0,0,20,0.2,30,0,0,0" L="10" o="561f0a" X="371" Y="105" T="12" H="38" /><S L="10" X="129" H="16" Y="180" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="10" o="561f0a" H="19" X="642" Y="83" T="12" P="0,0,20,0.2,0,0,0,0" /><S L="10" o="561f0a" X="129" H="16" Y="180" T="12" P="0,0,20,0.2,0,0,0,0" /><S L="115" o="ffb3e0" X="103" H="20" Y="244" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="115" o="ffb3e0" X="206" H="20" Y="217" T="12" P="0,0,0.3,0.2,-30,0,0,0" /><S L="90" o="ffb3e0" X="90" H="20" Y="157" T="12" P="0,0,0.3,0.2,30,0,0,0" /><S L="70" o="ffb3e0" X="134" H="20" Y="63" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S P="0,0,20,0.2,0,0,0,0" L="10" o="561f0a" H="15" Y="284" T="12" X="262" /><S P="0,0,20,0.2,0,0,0,0" L="10" o="561f0a" X="730" Y="185" T="12" H="19" /><S L="115" o="ffb3e0" X="219" H="20" Y="82" T="12" P="0,0,0.3,0.2,20,0,0,0" /><S L="70" o="ffb3e0" X="412" H="20" Y="177" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="10" o="561f0a" H="18" X="320" Y="243" T="12" P="0,0,20,0.2,-10,0,0,0" /><S L="40" o="ffb3e0" X="357" H="40" Y="90" T="12" P="0,0,0.3,0.2,45,0,0,0" /><S L="40" o="ffb3e0" X="464" H="40" Y="90" T="12" P="0,0,0.3,0.2,45,0,0,0" /><S L="115" o="ffb3e0" X="749" H="20" Y="49" T="12" P="0,0,0.3,0.2,-40,0,0,0" /><S L="70" o="ffb3e0" X="678" H="20" Y="83" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="70" o="ffb3e0" X="291" H="20" Y="263" T="12" P="0,0,0.3,0.2,-35,0,0,0" /><S L="70" o="ffb3e0" X="766" H="20" Y="185" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S P="0,0,0.3,0.2,-90,0,0,0" L="70" o="ffb3e0" H="20" Y="261" T="12" X="683" /><S c="4" L="90" o="6a7495" H="550" X="-45" Y="210" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S P="0,0,0.3,0.2,0,0,0,0" L="90" o="6a7495" X="845" c="4" Y="210" T="12" H="550" /></S><D><P C="ff6f77" Y="16" T="34" P="0,0" X="0" /><DS Y="132" X="610" /><DC Y="220" X="103" /><P X="636" Y="145" T="71" P="0,0" /><P P="0,0" Y="176" T="71" X="765" /><P P="0,0" Y="325" T="71" X="365" /><P X="43" Y="307" T="71" P="0,0" /><P P="0,0" Y="93" T="71" X="274" /><P X="412" Y="168" T="71" P="0,0" /></D><O><O C="14" Y="55" X="678" P="0" /><O C="14" Y="35" X="133" P="0" /><O C="14" Y="370" X="574" P="0" /><O C="11" Y="325" X="195" P="0" /><O C="11" Y="310" X="391" P="0" /><O C="11" Y="150" X="393" P="0" /><O C="11" Y="210" X="685" P="0" /><O C="11" Y="216" X="66" P="0" /><O C="11" Y="328" X="499" P="0" /><O C="22" Y="158" X="784" P="0" /><O C="22" Y="150" P="0" X="433" /><O C="22" Y="220" P="0" X="317" /><O C="22" Y="40" P="0" X="466" /><O C="14" Y="325" P="0" X="145" /></O><L /></Z></C>]],
		[6] = [[<C><P name="Florist's" author="Bluevintrix#6860" F="1" MEDATA="36,1;;;;-0;0:::1-" /><Z><S><S L="40" X="645" H="40" Y="385" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S L="10" X="391" H="103" Y="215" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="40" X="693" H="40" Y="245" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S L="10" X="431" H="103" Y="215" T="4" P="0,0,20,0.2,0,0,0,0" /><S L="80" X="781" H="30" Y="166" T="18" P="0,0,0.3,0.2,220,0,0,0" /><S L="40" X="411" H="105" Y="215" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="120" X="676" H="30" Y="399" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="780" H="30" Y="136" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="120" X="792" H="94" Y="394" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S L="120" X="490" H="30" Y="355" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="120" X="371" H="30" Y="380" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="618" H="30" Y="116" T="18" P="0,0,0.3,0.2,25,0,0,0" /><S L="40" X="411" H="99" Y="316" T="9" P="0,0,0,0,0,0,0,0" /><S L="10" X="522" H="28" Y="132" T="4" P="0,0,20,0.2,-5,0,0,0" /><S L="40" X="258" H="40" Y="350" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S L="40" X="195" H="40" Y="290" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S L="10" X="340" H="36" Y="130" T="4" P="0,0,20,0.2,27,0,0,0" /><S L="80" X="119" H="145" Y="425" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="10" X="231" H="58" Y="158" T="4" P="0,0,20,0.2,-10,0,0,0" /><S L="80" X="40" H="145" Y="390" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="40" X="20" H="40" Y="193" T="18" P="0,0,0.3,0.2,-90,0,0,0" /><S L="40" X="60" H="40" Y="193" T="18" P="0,0,0.3,0.2,90,0,0,0" /><S L="80" X="189" H="30" Y="157" T="18" P="0,0,0.3,0.2,-20,0,0,0" /><S L="80" X="200" H="30" Y="185" T="18" P="0,0,0.3,0.2,160,0,0,0" /><S L="10" X="156" H="28" Y="85" T="4" P="0,0,20,0.2,5,0,0,0" /><S L="10" X="425" H="36" Y="90" T="4" P="0,0,20,0.2,-35,0,0,0" /><S L="80" X="558" H="30" Y="115" T="18" P="0,0,0.3,0.2,-25,0,0,0" /><S L="40" X="326" H="40" Y="115" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S L="40" X="542" H="40" Y="245" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S P="0,0,0,0.2,0,0,0,0" L="10" H="513" Y="-174" T="1" m="" X="-5" /><S L="25" X="67" H="105" Y="265" T="9" P="0,0,0,0,0,0,0,0" /><S L="80" X="40" H="30" Y="70" T="18" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="116" H="30" Y="77" T="18" P="0,0,0.3,0.2,10,0,0,0" /><S L="40" X="438" H="40" Y="75" T="18" P="0,0,0.3,0.2,-46,0,0,0" /><S P="0,0,0.3,0.2,0,0,0,0" L="40" H="17" Y="345" T="0" m="" X="101" /><S L="10" H="50" X="815" Y="153" T="1" m="" P="0,0,0,0.2,0,0,0,0" /><S c="4" L="100" o="6a7495" H="694" X="850" Y="242" T="12" P="0,0,0.3,0.2,0,0,0,0" /></S><D><P X="617" Y="293" T="222" P="0,0" /><P X="420" Y="140" T="218" P="0,0" /><DC Y="150" X="412" /><P X="617" Y="326" T="223" P="0,0" /><P X="100" Y="353" T="253" P="0,0" /><P X="193" Y="278" T="72" P="0,0" /><P X="277" Y="350" T="72" P="0,0" /><P X="149" Y="70" T="72" P="0,0" /><P X="41" Y="175" T="72" P="0,0" /><P X="587" Y="95" T="72" P="0,0" /><P X="538" Y="345" T="72" P="0,0" /><P X="787" Y="122" T="72" P="0,0" /><P X="744" Y="325" T="226" P="0,0" /><DS Y="108" X="760" /></D><O><O C="11" Y="370" P="0" X="719" /><O C="11" Y="350" P="0" X="329" /><O C="11" Y="325" P="0" X="504" /><O C="11" Y="155" X="14" P="0" /><O C="11" Y="300" P="0" X="30" /><O C="11" Y="105" X="789" P="0" /><O C="22" Y="350" P="0" X="371" /><O C="22" Y="335" X="143" P="0" /><O C="22" Y="45" P="0" X="119" /><O C="14" Y="40" P="0" X="40" /><O C="14" Y="65" P="0" X="590" /><O C="14" Y="345" P="0" X="645" /><O C="14" Y="280" P="0" X="411" /></O><L /></Z></C>]],
		[7] = [[<C><P L="1600" name="Neverland" author="Bolodefchoco#0015" /><Z><S><S H="65" L="58" o="e4b8cb" X="434" c="4" Y="254" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" X="487" H="80" Y="245" T="17" P="0,0,0.3,0.2,85,0,0,0" /><S L="80" H="80" X="394" Y="287" T="17" P="0,0,0.3,0.2,45,0,0,0" /><S L="80" H="80" X="406" Y="198" T="17" P="0,0,0.3,0.2,65,0,0,0" /><S L="120" H="22" X="586" Y="235" T="18" P="0,0,0.3,0.2,-5,0,0,0" /><S L="120" X="829" H="22" Y="235" T="18" P="0,0,0.3,0.2,-55,0,0,0" /><S L="120" H="22" X="749" Y="365" T="18" P="0,0,0.3,0.2,15,0,0,0" /><S L="120" X="293" H="22" Y="276" T="18" P="0,0,0.3,0.2,5,0,0,0" /><S L="80" H="22" X="50" Y="355" T="18" P="0,0,0.3,0.2,45,0,0,0" /><S L="120" X="260" H="22" Y="395" T="18" P="0,0,0.3,0.2,-25,0,0,0" /><S L="120" H="22" X="500" Y="405" T="18" P="0,0,0.3,0.2,5,0,0,0" /><S L="80" X="66" H="22" Y="193" T="18" P="0,0,0.3,0.2,55,0,0,0" /><S L="120" H="22" X="240" Y="135" T="18" P="0,0,0.3,0.2,-25,0,0,0" /><S L="40" X="297" H="22" Y="141" T="18" P="0,0,0.3,0.2,65,0,0,0" /><S L="40" H="22" X="41" Y="173" T="18" P="0,0,0.3,0.2,-35,0,0,0" /><S L="40" X="20" H="22" Y="314" T="18" P="0,0,0.3,0.2,-45,0,0,0" /><S L="80" H="22" X="148" Y="298" T="18" P="0,0,0.3,0.2,55,0,0,0" /><S L="100" X="1169" H="80" Y="283" T="1" P="0,0,0,0.2,20,0,0,0" /><S L="40" H="22" X="202" Y="413" T="18" P="0,0,0.3,0.2,65,0,0,0" /><S L="40" X="862" H="22" Y="172" T="18" P="0,0,0.3,0.2,35,0,0,0" /><S P="0,0,0.3,0.2,0,0,0,0" L="58" o="e4b8cb" X="1143" c="4" Y="260" T="12" H="61" /><S L="40" H="22" X="679" Y="355" T="18" P="0,0,0.3,0.2,-75,0,0,0" /><S L="80" X="1084" H="80" Y="278" T="17" P="0,0,0.3,0.2,75,0,0,0" /><S L="80" H="80" X="1134" Y="204" T="17" P="0,0,0.3,0.2,75,0,0,0" /><S L="80" X="1195" H="80" Y="243" T="17" P="0,0,0.3,0.2,75,0,0,0" /><S L="80" H="80" X="1157" Y="317" T="17" P="0,0,0.3,0.2,75,0,0,0" /><S L="120" H="22" X="1022" Y="367" T="18" P="0,0,0.3,0.2,25,0,0,0" /><S L="40" H="22" X="954" Y="345" T="18" P="0,0,0.3,0.2,-65,0,0,0" /><S L="120" X="1250" H="22" Y="405" T="18" P="0,0,0.3,0.2,5,0,0,0" /><S L="40" X="1000" H="22" Y="117" T="18" P="0,0,0.3,0.2,-75,0,0,0" /><S L="80" H="22" X="1016" Y="129" T="18" P="0,0,0.3,0.2,75,0,0,0" /><S L="120" H="22" X="1418" Y="282" T="18" P="0,0,0.3,0.2,-15,0,0,0" /><S L="40" H="22" X="1348" Y="292" T="18" P="0,0,0.3,0.2,-105,0,0,0" /><S L="40" X="1322" H="22" Y="402" T="18" P="0,0,0.3,0.2,-85,0,0,0" /><S L="120" X="1486" H="22" Y="371" T="18" P="0,0,0.3,0.2,-15,0,0,0" /><S L="40" H="22" X="1552" Y="344" T="18" P="0,0,0.3,0.2,-105,0,0,0" /></S><D><P P="0,0" Y="0" T="257" X="0" /><P X="1600" Y="0" T="257" P="0,1" /><P P="0,0" Y="174" T="247" X="880" /><P P="0,0" Y="301" T="245" X="1371" /><P X="607" Y="227" T="241" P="0,0" /><P P="0,0" Y="383" T="235" X="723" /><P P="0,0" Y="165" T="235" X="253" /><P P="0,0" Y="398" T="222" X="541" /><P P="0,0" Y="274" T="209" X="525" /><P P="0,0" Y="239" T="156" X="-17" /><P P="0,0" Y="25" T="156" X="593" /><P P="0,0" Y="147" T="156" X="1539" /><P P="0,1" Y="396" T="156" X="902" /><P X="1421" Y="273" T="148" P="0,0" /><P X="324" Y="269" T="252" P="0,0" /><P X="349" Y="271" T="249" P="0,0" /><P X="61" Y="368" T="244" P="0,1" /><DS Y="128" X="426" /><DC Y="140" X="1159" /></D><O><O C="14" Y="383" X="1133" P="0" /><O C="14" Y="368" X="378" P="0" /><O C="11" Y="375" X="502" P="0" /><O C="14" Y="66" X="998" P="0" /><O C="11" Y="67" P="0" X="1001" /><O C="22" Y="171" P="0" X="487" /><O C="22" Y="134" P="0" X="374" /><O C="22" Y="206" P="0" X="1058" /><O C="22" Y="167" P="0" X="1192" /><O C="11" Y="343" P="0" X="1028" /><O C="11" Y="247" P="0" X="1401" /><O C="11" Y="329" P="0" X="1480" /><O C="11" Y="342" P="0" X="1330" /><O C="11" Y="246" P="0" X="109" /><O C="14" Y="135" P="0" X="20" /><O C="11" Y="294" P="0" X="789" /><O C="11" Y="240" P="0" X="300" /><O C="11" Y="363" P="0" X="249" /><O C="11" Y="348" P="0" X="871" /><O C="22" Y="201" P="0" X="812" /></O></Z></C>]],
		[8] = [[<C><P F="1" name="Cupid's Wheel of Love" author="Jasseh#0000"/><Z><S><S T="5" X="5" Y="320" L="10" H="160" P="0,0,0.3,0.2,0,0,0,0"/><S T="16" X="390" Y="141" L="60" H="20" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="16" X="300" Y="231" L="60" H="20" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="16" X="480" Y="231" L="60" H="20" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="16" X="390" Y="321" L="60" H="20" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="188" Y="304" L="28" H="40" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="291" Y="392" L="80" H="40" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="180" Y="395" L="100" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="71" Y="167" L="28" H="28" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="102" Y="392" L="28" H="40" P="0,0,0.3,0.2,0,0,0,0"/><S T="18" X="250" Y="386" L="40" H="80" P="0,0,0.3,0.2,45,0,0,0"/><S T="18" X="29" Y="209" L="40" H="120" P="0,0,0.3,0.2,45,0,0,0"/><S T="18" X="160" Y="355" L="40" H="162" P="0,0,0.3,0.2,45,0,0,0"/><S T="5" X="20" Y="304" L="40" H="40" P="0,0,0.3,0.2,0,0,0,0"/><S T="18" X="-32" Y="281" L="40" H="162" P="0,0,0.3,0.2,135,0,0,0"/><S T="5" X="5" Y="60" L="10" H="120" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="188" Y="167" L="28" H="28" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="598" Y="305" L="60" H="40" P="0,0,0.3,0.2,0,0,0,0"/><S T="18" X="-24" Y="99" L="40" H="162" P="0,0,0.3,0.2,135,0,0,0"/><S T="5" X="760" Y="398" L="80" H="54" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="697" Y="343" L="54" H="54" P="0,0,0.3,0.2,0,0,0,0"/><S T="18" X="525" Y="356" L="40" H="162" P="0,0,0.3,0.2,45,0,0,0"/><S T="18" X="606" Y="332" L="40" H="240" P="0,0,0.3,0.2,45,0,0,0"/><S T="18" X="697" Y="372" L="40" H="120" P="0,0,0.3,0.2,-45,0,0,0"/><S T="5" X="773" Y="194" L="54" H="54" P="0,0,0.3,0.2,0,0,0,0"/><S T="9" X="188" Y="232" L="28" H="103" P="0,0,0,0,0,0,0,0"/><S T="5" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0"/><S T="5" X="113" Y="71" L="100" H="28" P="0,0,0.3,0.2,0,0,0,0"/><S T="9" X="775" Y="296" L="30" H="150" P="0,0,0,0,0,0,0,0"/><S T="5" X="567" Y="124" L="28" H="28" P="0,0,0.3,0.2,0,0,0,0"/><S T="18" X="788" Y="150" L="40" H="162" P="0,0,0.3,0.2,-135,0,0,0"/><S T="18" X="121" Y="14" L="40" H="162" P="0,0,0.3,0.2,135,0,0,0"/><S T="5" X="716" Y="84" L="28" H="28" P="0,0,0.3,0.2,0,0,0,0"/><S T="18" X="601" Y="186" L="40" H="60" P="0,0,0.3,0.2,135,0,0,0"/><S T="18" X="559" Y="144" L="40" H="60" P="0,0,0.3,0.2,-45,0,0,0"/><S T="18" X="675" Y="125" L="40" H="40" P="0,0,0.3,0.2,-135,0,0,0"/><S T="18" X="702" Y="98" L="40" H="40" P="0,0,0.3,0.2,45,0,0,0"/><S T="12" X="-54" Y="200" L="108" H="400" P="0,0,0,0.2,0,0,0,0" o="6a7495"/><S T="12" X="855" Y="200" L="108" H="400" P="0,0,0,0.2,0,0,0,0" o="6a7495"/><S T="12" X="400" Y="-54" L="108" H="800" P="0,0,0,0.2,90,0,0,0" o="6a7495"/><S T="18" X="202" Y="153" L="40" H="40" P="0,0,0.3,0.2,-135,0,0,0"/><S T="18" X="229" Y="126" L="40" H="40" P="0,0,0.3,0.2,45,0,0,0"/><S T="12" X="300" Y="230" L="10" H="10" P="1,999999,0.3,0.2,0,0,0,0" o="324650" c="4" m=""/><S T="12" X="390" Y="320" L="10" H="10" P="1,999999,0.3,0.2,0,0,0,0" o="324650" c="4" m=""/><S T="12" X="390" Y="140" L="10" H="10" P="1,999999,0.3,0.2,0,0,0,0" o="324650" c="4" m=""/><S T="12" X="480" Y="230" L="10" H="10" P="1,999999,0.3,0.2,0,0,0,0" o="324650" c="4" m=""/></S><D><DC X="598" Y="270"/><DS X="200" Y="376"/></D><O><O X="598" Y="265" C="11" P="0"/><O X="568" Y="92" C="11" P="0"/><O X="73" Y="135" C="11" P="0"/><O X="305" Y="165" C="11" P="0"/><O X="25" Y="267" C="11" P="0"/><O X="79" Y="40" C="14" P="0"/><O X="47" Y="382" C="14" P="0"/><O X="390" Y="85" C="14" P="0"/><O X="760" Y="84" C="11" P="0"/><O X="311" Y="355" C="22" P="0"/><O X="197" Y="91" C="22" P="0"/><O X="700" Y="299" C="22" P="0"/><O X="475" Y="260" C="11" P="0"/><O X="742" Y="353" C="14" P="0"/><O X="103" Y="355" C="11" P="0"/></O><L><JR M1="42" M2="6" P1="390,230" MV="Infinity,0.5235987755982988"/><JR M1="44" M2="6" P1="390,230" MV="Infinity,0.5235987755982988"/><JR M1="45" M2="6" P1="390,230" MV="Infinity,0.5235987755982988"/><JR M1="43" M2="6" P1="390,230" MV="Infinity,0.5235987755982988"/><JD M1="44" M2="1"/><JD M1="42" M2="2"/><JD M1="43" M2="4"/><JD M1="45" M2="3"/></L></Z></C>]],
		[9] = [[<C><P name="Broken Heart" author="Jasseh#0000" L="1200" H="500" /><Z><S><S P="0,0,0.3,0.2,0,0,0,0" L="1200" o="df8181" X="600" c="4" Y="250" T="12" H="500" /><S L="220" X="397" H="60" Y="458" T="0" P="0,0,0.3,0.2,-35,0,0,0" /><S P="0,0,0.3,0.2,0,0,0,0" L="116" o="a9102c" X="712" Y="271" T="13" H="10" /><S L="220" H="60" X="352" Y="491" T="0" P="0,0,0.3,0.2,-10,0,0,0" /><S L="200" o="8c001a" H="200" X="637" Y="397" T="12" P="0,0,20,0.2,35,0,0,0" /><S L="40" H="60" X="245" Y="516" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="80" o="8c001a" H="240" X="562" Y="421" T="12" P="0,0,20,0.2,-35,0,0,0" /><S L="60" o="8c001a" H="240" X="547" Y="454" T="12" P="0,0,20,0.2,-55,0,0,0" /><S L="220" H="60" X="783" Y="416" T="0" P="0,0,0.3,0.2,60,0,0,0" /><S L="80" o="8c001a" H="280" X="692" Y="419" T="12" P="0,0,20,0.2,15,0,0,0" /><S L="120" H="160" X="479" Y="515" T="0" P="0,0,0.3,0.2,-55,0,0,0" /><S L="220" H="60" X="892" Y="477" T="0" P="0,0,0.3,0.2,5,0,0,0" /><S L="60" o="8c001a" H="240" X="728" Y="419" T="12" P="0,0,20,0.2,35,0,0,0" /><S L="60" H="80" X="997" Y="507" T="0" P="0,0,0.3,0.2,45,0,0,0" /><S L="200" H="160" X="815" Y="521" T="0" P="0,0,0.3,0.2,35,0,0,0" /><S L="160" H="25" X="238" Y="393" T="0" P="0,0,0.3,0.2,-15,0,0,0" /><S L="180" H="25" X="66" Y="425" T="0" P="0,0,0.3,0.2,65,0,0,0" /><S L="140" H="25" X="235" Y="260" T="0" P="0,0,0.3,0.2,15,0,0,0" /><S L="100" H="25" X="143" Y="274" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="160" H="25" X="242" Y="103" T="0" P="0,0,0.3,0.2,-25,0,0,0" /><S L="160" H="25" X="477" Y="127" T="0" P="0,0,0.3,0.2,5,0,0,0" /><S L="40" H="25" X="392" Y="131" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="40" H="25" X="995" Y="297" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="120" H="25" X="57" Y="155" T="0" P="0,0,0.3,0.2,80,0,0,0" /><S L="40" H="25" X="326" Y="196" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="129" H="25" X="969" Y="249" T="0" P="0,0,0.3,0.2,30,0,0,0" /><S L="160" H="25" X="705" Y="90" T="0" P="0,0,0.3,0.2,-10,0,0,0" /><S L="80" H="25" X="802" Y="101" T="0" P="0,0,0.3,0.2,45,0,0,0" /><S L="80" H="25" X="926" Y="198" T="0" P="0,0,0.3,0.2,25,0,0,0" /><S L="60" H="25" X="919" Y="373" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="160" H="25" X="1073" Y="350" T="0" P="0,0,0.3,0.2,-35,0,0,0" /><S L="116" o="a9102c" H="10" X="494" Y="313" T="13" P="0,0,0.3,0.2,0,0,0,0" /><S L="80" H="25" X="1090" Y="162" T="0" P="0,0,0.3,0.2,-45,0,0,0" /><S L="80" H="25" X="971" Y="92" T="0" P="0,0,0.3,0.2,15,0,0,0" /><S P="0,0,20,0.2,0,0,0,0" L="116" o="8c001a" H="10" Y="321" T="13" X="506" /><S L="116" o="8c001a" H="10" X="723" Y="277" T="13" P="0,0,20,0.2,0,0,0,0" /><S L="20" o="a9102c" H="10" X="448" Y="264" T="13" P="0,0,20,0.2,0,0,0,0" /><S P="0,0,20,0.2,0,0,0,0" L="15" o="a9102c" X="435" Y="288" T="13" H="10" /><S P="0,0,20,0.2,0,0,0,0" L="20" o="a9102c" X="669" Y="207" T="13" H="10" /><S L="15" o="a9102c" X="651" H="10" Y="230" T="13" P="0,0,20,0.2,0,0,0,0" /><S H="200" L="1200" o="6a7495" X="600" c="4" Y="600" T="12" P="0,0,0.3,0.2,0,0,0,0" /><S H="40" L="20" o="df8181" X="600" c="4" Y="294" T="12" P="0,0,0.3,0.2,40,0,0,0" /><S P="0,0,0.3,0.2,36,0,0,0" L="30" o="df8181" X="600" c="4" Y="260" T="12" H="50" /><S H="50" L="30" o="df8181" X="623" c="4" Y="350" T="12" P="0,0,0.3,0.2,40,0,0,0" /><S P="0,0,0.3,0.2,40,0,0,0" L="16" o="df8181" X="628" c="4" Y="388" T="12" H="26" /><S P="0,0,0.3,0.2,40,0,0,0" L="60" o="df8181" X="623" c="4" Y="327" T="12" H="20" /><S H="22" L="22" o="df8181" X="633" c="4" Y="377" T="12" P="0,0,0.3,0.2,40,0,0,0" /><S H="10" L="16" o="df8181" X="630" c="4" Y="400" T="12" P="0,0,0.3,0.2,40,0,0,0" /><S P="0,0,0.3,0.2,20,0,0,0" L="80" o="770016" X="656" c="4" Y="460" T="12" H="80" /><S H="80" L="80" o="8c001a" X="658" c="4" Y="459" T="12" P="0,0,0.3,0.2,20,0,0,0" /></S><D><DS Y="100" X="480" /><DC Y="222" X="590" /></D><O><O C="11" Y="413" X="352" P="0" /><O C="11" Y="66" X="230" P="0" /><O C="11" Y="42" X="745" P="0" /><O C="11" Y="261" X="878" P="0" /><O C="11" Y="224" X="1049" P="0" /><O C="11" Y="418" X="1107" P="0" /><O C="11" Y="333" X="216" P="0" /><O C="11" Y="328" X="21" P="0" /><O C="11" Y="46" X="1103" P="0" /><O C="22" Y="219" X="240" P="0" /><O C="22" Y="416" X="857" P="0" /><O C="22" Y="99" X="533" P="0" /><O C="22" Y="51" X="981" P="0" /><O C="14" Y="67" X="48" P="0" /><O C="14" Y="459" X="1106" P="0" /><O C="14" Y="126" X="760" P="0" /><O C="14" Y="469" P="0" X="169" /></O><L /></Z></C>]],
		[10] = [[<C><P name="Celestial Tower" author="Eremia#2246" L="1080" H="680" F="1" d="x_deadmeat/x_pictos/d_2299.png,620,299;x_deadmeat/x_pictos/d_2297.png,793,-11;x_deadmeat/x_pictos/d_2297.png,587,610;x_deadmeat/x_pictos/d_2298.png,402,573;x_deadmeat/x_pictos/d_2298.png,-101,17;x_deadmeat/x_pictos/d_2296.png,850,511;x_deadmeat/x_pictos/d_2296.png,-90,511" MEDATA=";;;;-0;0::0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20:1-" /><Z><S><S T="12" X="40" Y="480" L="80" H="400" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="560" Y="430" L="80" H="500" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="180" Y="500" L="40" H="360" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="300" Y="440" L="40" H="240" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="460" Y="640" L="40" H="80" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="740" Y="560" L="40" H="80" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="980" Y="370" L="40" H="380" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="900" Y="600" L="120" H="160" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="400" Y="580" L="160" H="40" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="12" X="640" Y="260" L="80" H="80" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="13" X="600" Y="300" L="80" P="0,0,0.3,0.2,0,0,0,0" o="655F51" c="4"/><S T="13" X="240" Y="240" L="80" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="13" X="560" Y="480" L="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="13" X="640" Y="180" L="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="13" X="840" Y="400" L="120" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="840" Y="460" L="240" H="120" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="240" Y="280" L="160" H="80" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="180" Y="380" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="240" Y="166" L="40" H="40" P="0,0,0.4,0.2,45,0,0,0" o="AB9D7D"/><S T="12" X="840" Y="286" L="40" H="40" P="0,0,0.4,0.2,45,0,0,0" o="AB9D7D"/><S T="12" X="560" Y="442" L="20" H="20" P="0,0,0.4,0.2,45,0,0,0" o="AB9D7D"/><S T="12" X="640" Y="142" L="20" H="20" P="0,0,0.4,0.2,45,0,0,0" o="AB9D7D"/><S T="12" X="300" Y="580" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="420" Y="500" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="620" Y="280" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="950" Y="200" L="100" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="500" Y="200" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="40" Y="320" L="80" H="80" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="860" Y="620" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="980" Y="620" L="40" H="120" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="420" Y="640" L="40" H="80" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="740" Y="640" L="40" H="80" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="640" Y="620" L="160" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="80" Y="540" L="160" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="560" Y="500" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="640" Y="200" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="300" Y="380" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="12" X="180" Y="560" L="40" H="80" P="0,0,0.4,0.2,0,0,0,0" o="AB9D7D"/><S T="9" X="240" Y="520" L="80" H="320" P="0,0,0,0,0,0,0,0" m=""/><S T="9" X="500" Y="450" L="40" H="460" P="0,0,0,0,0,0,0,0" m=""/><S T="12" X="239" Y="341" L="79" H="40" P="0,0,0.3,0.2,0,0,0,0" o="d8abb1" c="4"/><S T="12" X="540" Y="800" L="1080" H="240" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4"/></S><D><P X="379" Y="265" T="218" P="0,0"/><DC X="500" Y="170"/><DS X="420" Y="470"/></D><O><O X="120" Y="470" C="11" P="0"/><O X="40" Y="260" C="11" P="0"/><O X="420" Y="580" C="11" P="0"/><O X="560" Y="400" C="11" P="0"/><O X="460" Y="200" C="11" P="0"/><O X="980" Y="150" C="11" P="0"/><O X="860" Y="570" C="11" P="0"/><O X="980" Y="440" C="11" P="0"/><O X="40" Y="400" C="14" P="0"/><O X="240" Y="620" C="14" P="0"/><O X="40" Y="160" C="14" P="0"/><O X="640" Y="80" C="14" P="0"/><O X="1040" Y="280" C="14" P="0"/><O X="920" Y="620" C="14" P="0"/><O X="300" Y="540" C="22" P="0"/><O X="620" Y="240" C="22" P="0"/><O X="660" Y="580" C="22" P="0"/><O X="900" Y="270" C="22" P="0"/><O X="640" Y="90" C="22" P="0"/><O X="240" Y="110" C="22" P="0"/></O><L><JD c="423B22,2,1,0" M1="11" M2="11" P1="240,160" P2="240,100"/><JD c="423B22,2,1,0" M1="11" M2="11" P1="640,140" P2="640,80"/><JD c="423B22,2,1,0" M1="11" M2="11" P1="840,280" P2="840,180"/><JD c="782626,2,1,0" M1="11" M2="11" P1="240,100" P2="240,80"/><JD c="782626,2,1,0" M1="11" M2="11" P1="640,80" P2="640,60"/><JD c="782626,2,1,0" M1="11" M2="11" P1="840,180" P2="840,160"/><JD c="782626,2,1,0" M1="11" M2="11" P1="240,100" P2="320,100"/><JD c="782626,2,1,0" M1="11" M2="11" P1="640,80" P2="560,80"/><JD c="782626,2,1,0" M1="11" M2="11" P1="840,180" P2="760,180"/><JD c="782626,2,1,0" M1="11" M2="11" P1="240,80" P2="320,80"/><JD c="782626,2,1,0" M1="11" M2="11" P1="640,60" P2="560,60"/><JD c="782626,2,1,0" M1="11" M2="11" P1="840,160" P2="760,160"/><JD c="782626,2,1,0" M1="11" M2="11" P1="240,90" P2="320,80"/><JD c="782626,2,1,0" M1="11" M2="11" P1="640,70" P2="560,60"/><JD c="782626,2,1,0" M1="11" M2="11" P1="840,170" P2="760,160"/><JD c="782626,2,1,0" M1="11" M2="11" P1="240,90" P2="320,100"/><JD c="782626,2,1,0" M1="11" M2="11" P1="640,70" P2="560,80"/><JD c="782626,2,1,0" M1="11" M2="11" P1="840,170" P2="760,180"/><JD c="A86DD2,40,0.5,0" P1="500,200" P2="500,680"/><JD c="A86DD2,40,0.5,0" P1="220,360" P2="220,680"/><JD c="A86DD2,40,0.5,0" P1="260,360" P2="260,680"/></L></Z></C>]],
		[11] = [[<C><P name="The Twins" author="Eremia#2246" L="1160" H="680" d="x_deadmeat/x_pictos/d_1998-fs8.png,450,199" MEDATA=";;;0,4:1,4:2,4:3,4:4,4:5,4:6,4:7,4:8,4:9,4:10,4:11,4:12,4:13,4:14,4:15,4:16,4:17,4:18,4:19,4:20,4:21,4:22,4:23,4:24,4:25,4:26,4:27,4:28,4:29,4:30,4:31,4:32,4:33,4:34,4:35,4:36,4:37,4:38,4:39,4:40,4:41,4:42,4:43,4:44,4:45,4:46,4:47,4:48,4:49,4:50,4:51,4:52,4:53,4:54,4:55,4:56,4:57,4:58,4:59,4:60,4:61,4:62,4:63,4:64,4:65,4:66,4:67,4:68,4:69,4:70,4:71,4:72,4:73,4:74,4:75,4:76,4:77,4:78,4:79,4;-0;0::0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79:1-" /><Z><S><S T="12" X="440" Y="480" L="80" H="400" P="0,0,0.3,0.2,0,0,0,0" o="3B637E" c="4"/><S T="12" X="680" Y="420" L="80" H="520" P="0,0,0.3,0.2,0,0,0,0" o="277358" c="4"/><S T="12" X="-200" Y="340" L="400" H="680" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4" N=""/><S T="12" X="1360" Y="340" L="400" H="680" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4" N=""/><S T="12" X="580" Y="1020" L="2000" H="680" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4" N=""/><S T="12" X="580" Y="-340" L="2000" H="680" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4" N=""/><S T="12" X="180" Y="500" L="40" H="360" P="0,0,0.3,0.2,0,0,0,0" o="3B637E" c="4"/><S T="12" X="100" Y="640" L="40" H="80" P="0,0,0.3,0.2,0,0,0,0" o="3B637E" c="4"/><S T="12" X="960" Y="560" L="80" H="240" P="0,0,0.3,0.2,0,0,0,0" o="277358" c="4"/><S T="12" X="440" Y="220" L="80" H="120" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="960" Y="380" L="80" H="120" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="440" Y="160" L="57" H="57" P="0,0,0.4,0.2,45,0,0,0" o="6A9FC3"/><S T="12" X="440" Y="185" L="14" H="14" P="0,0,0.4,0.2,45,0,0,0" o="3B637E"/><S T="12" X="960" Y="320" L="57" H="57" P="0,0,0.4,0.2,-45,0,0,0" o="69C2A3"/><S T="12" X="520" Y="380" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="440" Y="205" L="20" H="40" P="0,0,0.4,0.2,0,0,0,0" o="3B637E"/><S T="12" X="460" Y="580" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="580" Y="500" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="80" Y="440" L="80" H="80" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="960" Y="345" L="14" H="14" P="0,0,0.4,0.2,45,0,0,0" o="277358"/><S T="12" X="220" Y="460" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="100" Y="260" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="960" Y="365" L="20" H="40" P="0,0,0.4,0.2,0,0,0,0" o="277358"/><S T="13" X="280" Y="100" L="30" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3" c="4"/><S T="13" X="876" Y="256" L="50" P="0,0,0.4,0.2,180,0,0,0" o="69C2A3" c="4"/><S T="13" X="880" Y="260" L="50" P="0,0,0.4,0.2,180,0,0,0" o="359287" c="4"/><S T="13" X="276" Y="96" L="30" P="0,0,0.4,0.2,0,0,0,0" o="359287" c="4"/><S T="12" X="260" Y="300" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="300" Y="300" L="40" H="120" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="460" Y="400" L="40" H="80" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="100" Y="540" L="40" H="120" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="220" Y="340" L="120" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="360" Y="500" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="200" Y="180" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="12" X="660" Y="420" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="820" Y="500" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="1100" Y="500" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="780" Y="380" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="820" Y="140" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="620" Y="300" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="980" Y="180" L="40" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="1080" Y="260" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="760" Y="340" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="840" Y="100" L="80" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="660" Y="180" L="120" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="780" Y="540" L="120" H="40" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="1060" Y="600" L="120" H="160" P="0,0,0.4,0.2,0,0,0,0" o="69C2A3"/><S T="12" X="520" Y="640" L="160" H="80" P="0,0,0.4,0.2,0,0,0,0" o="6A9FC3"/><S T="9" X="220" Y="660" L="440" H="40" P="0,0,0,0,0,0,0,0" m=""/><S T="9" X="800" Y="660" L="400" H="40" P="0,0,0,0,0,0,0,0" m=""/></S><D><DC X="620" Y="150"/><DS X="460" Y="350"/></D><O><O X="200" Y="300" C="11" P="0"/><O X="80" Y="380" C="11" P="0"/><O X="580" Y="550" C="11" P="0"/><O X="660" Y="380" C="11" P="0"/><O X="440" Y="80" C="11" P="0"/><O X="840" Y="60" C="11" P="0"/><O X="1060" Y="500" C="11" P="0"/><O X="900" Y="340" C="11" P="0"/><O X="200" Y="140" C="22" P="0"/><O X="340" Y="460" C="22" P="0"/><O X="620" Y="250" C="22" P="0"/><O X="780" Y="450" C="22" P="0"/><O X="1080" Y="210" C="22" P="0"/><O X="60" Y="500" C="14" P="0"/><O X="500" Y="420" C="14" P="0"/><O X="820" Y="200" C="14" P="0"/><O X="1100" Y="360" C="14" P="0"/><O X="700" Y="60" C="14" P="0"/></O><L><JD c="359287,200,1,0" P1="0,70" P2="1160,70"/><JD c="359287,200,1,0" P1="0,250" P2="1160,250"/><JD c="359287,200,1,0" P1="0,430" P2="1160,430"/><JD c="359287,200,1,0" P1="0,610" P2="1160,610"/><JD c="3B637E,80,1,0" P1="200,640" P2="300,720"/><JD c="277358,40,1,0" P1="720,660" P2="820,740"/><JD c="3B637E,40,1,0" P1="180,560" P2="300,660"/><JD c="277358,40,1,0" P1="700,600" P2="820,700"/><JD c="3B637E,40,1,0" P1="420,560" P2="300,660"/><JD c="277358,40,1,0" P1="940,600" P2="820,700"/><JD c="3B637E,80,1,0" P1="400,640" P2="300,720"/><JD c="277358,40,1,0" P1="920,660" P2="820,740"/><JD c="6DD2C3,40,0.6,1" P1="0,660" P2="1160,660"/><JD c="EAB8D8,8,1,0" P1="40,60" P2="50,50"/><JD c="EAB8D8,8,1,0" P1="340,20" P2="350,10"/><JD c="EAB8D8,8,1,0" P1="1080,20" P2="1090,10"/><JD c="EAB8D8,8,1,0" P1="70,40" P2="60,30"/><JD c="EAB8D8,8,1,0" P1="20,100" P2="10,90"/><JD c="EAB8D8,8,1,0" P1="1060,80" P2="1070,70"/><JD c="EAB8D8,8,1,0" P1="1140,120" P2="1150,110"/><JD c="EAB8D8,2,1,0" P1="50,0" P2="50,130"/><JD c="EAB8D8,2,1,0" P1="350,-40" P2="350,90"/><JD c="EAB8D8,2,1,0" P1="1090,-40" P2="1090,90"/><JD c="EAB8D8,2,1,0" P1="400,-40" P2="400,30"/><JD c="EAB8D8,2,1,0" P1="640,-20" P2="640,50"/><JD c="EAB8D8,2,1,0" P1="650,0" P2="650,70"/><JD c="EAB8D8,2,1,0" P1="60,-20" P2="60,110"/><JD c="EAB8D8,2,1,0" P1="360,-60" P2="360,70"/><JD c="EAB8D8,2,1,0" P1="410,-60" P2="410,50"/><JD c="EAB8D8,2,1,0" P1="10,0" P2="10,170"/><JD c="EAB8D8,2,1,0" P1="1070,-20" P2="1070,150"/><JD c="EAB8D8,2,1,0" P1="1150,0" P2="1150,190"/><JD c="EAB8D8,8,1,0" P1="40,80" P2="50,70"/><JD c="EAB8D8,8,1,0" P1="340,40" P2="350,30"/><JD c="EAB8D8,8,1,0" P1="1080,40" P2="1090,30"/><JD c="EAB8D8,8,1,0" P1="70,60" P2="60,50"/><JD c="EAB8D8,8,1,0" P1="370,20" P2="360,10"/><JD c="EAB8D8,8,1,0" P1="1110,20" P2="1100,10"/><JD c="EAB8D8,8,1,0" P1="20,120" P2="10,110"/><JD c="EAB8D8,8,1,0" P1="1060,100" P2="1070,90"/><JD c="EAB8D8,8,1,0" P1="1140,140" P2="1150,130"/><JD c="EAB8D8,8,1,0" P1="40,100" P2="50,90"/><JD c="EAB8D8,8,1,0" P1="340,60" P2="350,50"/><JD c="EAB8D8,8,1,0" P1="1080,60" P2="1090,50"/><JD c="EAB8D8,8,1,0" P1="420,20" P2="410,10"/><JD c="EAB8D8,8,1,0" P1="660,40" P2="650,30"/><JD c="EAB8D8,8,1,0" P1="660,20" P2="650,10"/><JD c="EAB8D8,8,1,0" P1="70,80" P2="60,70"/><JD c="EAB8D8,8,1,0" P1="370,40" P2="360,30"/><JD c="EAB8D8,8,1,0" P1="1110,40" P2="1100,30"/><JD c="EAB8D8,8,1,0" P1="20,140" P2="10,130"/><JD c="EAB8D8,8,1,0" P1="1060,120" P2="1070,110"/><JD c="EAB8D8,8,1,0" P1="1140,160" P2="1150,150"/><JD c="EAB8D8,8,1,0" P1="40,120" P2="50,110"/><JD c="EAB8D8,8,1,0" P1="340,80" P2="350,70"/><JD c="EAB8D8,8,1,0" P1="1080,80" P2="1090,70"/><JD c="EAB8D8,8,1,0" P1="420,40" P2="410,30"/><JD c="EAB8D8,8,1,0" P1="660,60" P2="650,50"/><JD c="EAB8D8,8,1,0" P1="70,100" P2="60,90"/><JD c="EAB8D8,8,1,0" P1="370,60" P2="360,50"/><JD c="EAB8D8,8,1,0" P1="1110,60" P2="1100,50"/><JD c="EAB8D8,8,1,0" P1="390,20" P2="400,10"/><JD c="EAB8D8,8,1,0" P1="630,40" P2="640,30"/><JD c="EAB8D8,8,1,0" P1="630,20" P2="640,10"/><JD c="EAB8D8,8,1,0" P1="20,160" P2="10,150"/><JD c="EAB8D8,8,1,0" P1="1060,140" P2="1070,130"/><JD c="EAB8D8,8,1,0" P1="1140,180" P2="1150,170"/><JD c="EAB8D8,8,1,0" P1="45,135" P2="50,130"/><JD c="EAB8D8,8,1,0" P1="345,95" P2="350,90"/><JD c="EAB8D8,8,1,0" P1="1085,95" P2="1090,90"/><JD c="EAB8D8,8,1,0" P1="415,55" P2="410,50"/><JD c="EAB8D8,8,1,0" P1="655,75" P2="650,70"/><JD c="EAB8D8,8,1,0" P1="65,115" P2="60,110"/><JD c="EAB8D8,8,1,0" P1="365,75" P2="360,70"/><JD c="EAB8D8,8,1,0" P1="1105,75" P2="1100,70"/><JD c="EAB8D8,8,1,0" P1="395,35" P2="400,30"/><JD c="EAB8D8,8,1,0" P1="635,55" P2="640,50"/><JD c="EAB8D8,8,1,0" P1="15,175" P2="10,170"/><JD c="EAB8D8,8,1,0" P1="1065,155" P2="1070,150"/><JD c="EAB8D8,8,1,0" P1="1145,195" P2="1150,190"/></L></Z></C>]]
	},
}

if not tfm.get.room.playerList[module.team.developer]
	and (tfm.get.room.uniquePlayers < module.minPlayers
		or tfm.get.room.uniquePlayers > module.maxPlayers) then
	return system.exit()
end

math.randomseed(time())
system.luaEventLaunchInterval(40, 0)
system.setLuaEventBanner(7)

--[[ Translations ]]--
local translation
do
	local translations = {
		en = {
			guide = {
				regularMouse = {
					"Collect poison and bring it to the cupids' hearts by pressing the spacebar.",
					"Do not get hit by the love arrows. They will link you to another player."
				},
				linkedMouse = {
					"Collect the love letters."
				},
				cupid = {
					"Click to shoot love arrows. Hit two players to link them.",
					"Do not allow non-linked players to poison your heart!"
				},
			},

			cupid = {
				transform = "You're now a cupid!",
				hit = "Your arrow has hit <B>%s</B>!",
				link = "You have linked the players <B>%s</B> and <B>%s</B>!",
			},

			item = {
				regularMouse = "Collected potions:",
				linkedMouse = "Collected loved letters:",
				cupid = "Total players in love:"
			},

			credit = "Thanks to %s's coding passion, %s's & %s's passionated art and %s's brainstorming, ♥ Love is in the air ♥"
		},
		br = {
			guide = {
				regularMouse = {
					"Colete veneno e envenene os corações dos cupidos pressinando a barra de espaço.",
					"Não seja acertado pelas flechas do amor. Elas irão conectar você a outro jogador."
				},
				linkedMouse = {
					"Colete as cartas de amor."
				},
				cupid = {
					"Clique para atirar flechas do amor. Acerte dois jogadores para conectá-los.",
					"Não permita que os jogadores que não estão conectados envenenem seu coração!"
				},
			},

			cupid = {
				transform = "Agora você é um cupido!",
				hit = "Sua flecha acertou <B>%s</B>!",
				link = "Você juntou os jogadores <B>%s</B> e <B>%s</B>!",
			},

			item = {
				regularMouse = "Poções coletadas:",
				linkedMouse = "Cartas de amor coletadas:",
				cupid = "Total de jogadores apaixonados:"
			},

			credit = "Graças a paixão em codificar do %s, as artes apaixonadas de %s & %s e as boas ideias de %s, ♥ O amor está no ar ♥"
		},
		es = {
			cupid = {
				transform = "¡Ahora eres un cupido!",
				hit = "¡Tu flecha le dio a <b>%s</b>!",
				link = "¡Conectaste a los jugadores <b>%s</b> y <b>%s</b>!",
			},

			guide = {
				regularMouse = {
					"Consigue veneno y envenena el corazon de los cupidos presionando la tecla espacio.",
					"No dejes que te disparen con las flechas del amor. Harán que te conectes con otro jugador."
				},
				linkedMouse = {
					"Consigue las cartas de amor."
				},
				cupid = {
					"Click para disparar flechas del amor. Dispárale a dos jugadores para conectarlos.",
					"¡No dejes que los jugadores que no están conectados te envenenen!"
				},
			},

			item = {
				regularMouse = "Pociones en mi colección:",
				linkedMouse = "Cartas de amor en mi colección:",
				cupid = "Jugadores enamorados:",
			},

			credit = "Gracias a la pasión de %s por programar, la pasión de %s & %s por el arte y las geniales ideas de %s, ♥ El amor está en el aire ♥"
		},
		ru = {
			guide = {
				regularMouse = {
					"Собирай колбы с ядом и приноси их к сердцам Купидонов, нажимая на пробел.",
					"Не позволяй в себя попасть любовной стрелой. Ты будешь привязан(а) к другому игроку."
				},
				linkedMouse = {
					"Собирай любовные письма."
				},
				cupid = {
					"Кликни чтобы выстрелить любовную стрелу. Попади в двух игроков чтобы привязать их друг к другу.",
					"Не позволяй свободным игрокам отравлять твои сердца!"
				},
			},

			cupid = {
				transform = "Теперь ты Купидон!",
				hit = "Твоя стрела попала в <B>%s</B>!",
				link = "Ты привязал(а) игроков <B>%s</B> и <B>%s</B>!",
			},

			item = {
				regularMouse = "Собранные колбы:",
				linkedMouse = "Собранные любовные письма:",
				cupid = "Итого влюблённых игроков:"
			},

			credit = "Спасибо талантливому програмисту %s, замечательным рисункам %s и %s, и идеям %s', ♥ Любовь повсюуду ♥"
		},
		it = {
			guide = {
				regularMouse = {
					"Colleziona le pozioni avvelenate e portale al cuore dei Cupidi premendo la barra spaziatrice.",
					"Non farti colpire dalle frecce dell'amore. Ti uniranno ad un altro giocatore."
				},
				linkedMouse = {
					"Colleziona le lettere d'amore."
				},
				cupid = {
					"Clicca per sparare le frecce d'amore. Colpisci due giocatori per unirli tra di loro.",
					"Non permettere ai giocatori non uniti di avvelenare il tuo cuore!"
				},
			},

			cupid = {
				transform = "Ora sei un Cupido!",
				hit = "La tua freccia ha colpito <B>%s</B>!",
				link = "Hai unito <B>%s</B> e <B>%s</B>!",
			},

			item = {
				regularMouse = "Pozioni avvelenate raccolte:",
				linkedMouse = "Lettere d'amore raccolte:",
				cupid = "Giocatori totali innamorati:"
			},

			credit = "Grazie a %s per la sua passione per la programmazione, %s & %s per le loro doti artistiche e il brainstorming di %s, ♥ L'amore è nell'aria! ♥"
		},
		ro = {
			guide = {
				regularMouse = {
					"Adună poțiunile otrăvitoare și adu-le către inimile Cupidonilor, tastând spațiu.",
					"Nu te lăsa lovit(ă) de săgețile de dragoste. În caz contrar, vei fi legat(ă) de un alt jucător."
				},
				linkedMouse = {
					"Adună scrisorile de dragoste."
				},
				cupid = {
					"Fă clic pentru a trage o săgeată de dragoste. Țintește doi jucători pentru a-i lega.",
					"Nu lăsa jucătorii liberi să-ți otrăvească inimile!"
				},
			},

			cupid = {
				transform = "Acum ești un Cupidon!",
				hit = "Săgeata ta a lovit pe <B>%s</B>!",
				link = "Ai legat jucătorii <B>%s</B> și <B>%s</B>!",
			},

			item = {
				regularMouse = "Poțiuni colectate:",
				linkedMouse = "Scrisori de dragoste colectate:",
				cupid = "Jucători îndrăgostiți în total:"
			},

			credit = "Mulțumim pasiunii de programator a lui %s, lucrărilor de artă ale lui %s și %s, și ideilor lui %s', ♥ Dragostea e în aer ♥"
		},
		fr = {
			guide = {
				regularMouse = {
					"Ramasse du poison et apporte-le aux cœurs du Cupidon en appuyant la touche espace.",
					"Ne te laisse pas frappé par les flèches de l'amour. Cela va te lier à un autre joueur."
				},
				linkedMouse = {
					"Ramasse les lettres d'amour."
				},
				cupid = {
					"Clique pour tirer des flèches d'amour. Cible deux joueurs pour les lier.",
					"Ne laisse pas les joueurs qui ne sont pas liés empoisonner ton cœur!"
				},
			},

			cupid = {
				transform = "Tu es maintenant un Cupidon!",
				hit = "Ta flèche a atteint <B>%s</B>!",
				link = "Tu as lié les joueurs <B>%s</B> et <B>%s</B>!",
			},

			item = {
				regularMouse = "Ramasse des potions:",
				linkedMouse = "Ramasse des lettres d'amour:",
				cupid = "Nombre total de souris amoureuses:"
			},

			credit = "Remerciements pour le coding de %s, l'art passionné de %s & %s, les idées de %s, ♥ L'amour est dans l'air ♥"
		},
		hu = {
			guide = {
				regularMouse = {
					"Gyűjts mérgeket és vidd el a cupidok szívéhez a szóközt lenyomva!",
					"Ne hagyd, hogy eltaláljanak a nyilak! Ezek hozzákapcsolnak egy másik játékoshoz."
				},
				linkedMouse = {
					"Gyűjtsd össze a szerelmes leveleket!"
				},
				cupid = {
					"Kattints, hogy nyilakat lőj! Ha eltalálsz két játékost, ők összekapcsolódnak.",
					"Ne hagyd, hogy az egyedül lévő játékosok megmérgezzék a szívedet!"
				},
			},

			cupid = {
				transform = "Te egy cupido vagy!",
				hit = "A nyilad eltalálta őt: <B>%s</B>!",
				link = "Összekapcsoltad <B>%s</B> és <B>%s</B> játékosokat!",
			},

			item = {
				regularMouse = "Összegyűjtött mérgek:",
				linkedMouse = "Összegyűjtött szerelmes levelek:",
				cupid = "Összekapcsolt játékosok:"
			},

			credit = "Köszönet %s programozásáért, %s és %s rajzaiért, és %s ötleteiért, ♥ Szerelem van a levegőben ♥"
		},
		tr = {
			guide = {
				regularMouse = {
					"Zehirleri toplayın ve onları boşluk tuşuna basarak aşk tanrısının kalplerine salın.",
					"Aşk oklarının hedefi olmayın. Yoksa diğer oyunculara bağlanacaksınız."
				},
				linkedMouse = {
					"Aşk mektuplarını toplayın."
				},
				cupid = {
					"Aşk oklarını fırlatmak için tıklayın. Onları birbirine bağlamak için iki oyuncuya aşk oku isabet ettirin.",
					"Birbirine bağlı oyuncuların kalbinizi zehirlemesine izin vermeyin!"
				},
			},

			cupid = {
				transform = "Artık aşk tanrısısın!",
				hit = "Okun <B>%s</B>'a isabet etti",
				link = "<B>%s</B> ve <B>%s</B>'i birbirine bağladın!",
			},

			item = {
				regularMouse = "Toplanan iksirler:",
				linkedMouse = "Toplanan aşk mektupları:",
				cupid = "Aşkı bulan toplam oyuncu:"
			},

			credit = "%s'a kodlama tutkusu için, %s ve %s'a tutkulu sanatları için ve %s'e beyin fırtınası için teşekkürler, ♥ Havada aşk kokusu var ♥"
		},
		nl = {
			guide = {
				regularMouse = {
					"Verzamel toverdrankjes en breng ze naar de harten van Cupido. Gebruik hiervoor je spatiebalk!",
					"Word niet geraakt door de pijlen der liefde. Ze zullen jou verbinden aan een andere speler."
				},
				linkedMouse = {
					"Verzamel de liefdesbrieven."
				},
				cupid = {
					"Klik om pijlen te schieten. Raak twee spelers om ze met elkaar te verbinden.",
					"Laat niet-verbonden spelers niet toe je hart te vergiftigen!"
				},
			},

			cupid = {
				transform = "Je bent nu Cupido!",
				hit = "Je pijl heeft <B>%s</B> geraakt!",
				link = "Je hebt nu <B>%s</B> en <B>%s</B> met elkaar verbonden!",
			},

			item = {
				regularMouse = "Verzamelde toverdrankjes:",
				linkedMouse = "Verzamelde liefdesbrieven:",
				cupid = "Aantal verliefde spelers:"
			},

			credit = "Met dank aan %s's liefde voor programmeren, %s & %s prachtige art en %s gedachtenspinsels, ♥ Love is in the air ♥"
		},
		pl = {
			guide = {
				regularMouse = {
					"Zbieraj mikstury, a następnie, naciskając spację, zanieś je do serc kupidynów.",
					"Nie daj się trafić strzałą kupidyna. Inaczej połączą Cię z drugim graczem."
				},
				linkedMouse = {
					"Zbierz listy miłosne."
				},
				cupid = {
					"Kliknij, aby wystrzelić strzałę miłości. Traf w dwóch graczy, aby ich połączyć.",
					"Nie pozwól, aby niepołączeni gracze zatruli Twoje serce!"
				},
			},

			cupid = {
				transform = "Jesteś kupidynem!",
				hit = "Trafiłeś/-aś <B>%s</B>!",
				link = "Połączyłeś/-aś <B>%s</B> i <B>%s</B>!",
			},

			item = {
				regularMouse = "Zebrane mikstury:",
				linkedMouse = "Zebrane listy miłosne:",
				cupid = "Ilość połączonych graczy:"
			},

			credit = "Podziękowania dla %s's za pasję kodowania, %s i %s za namiętną sztukę i %s's za burzę mózgów. ♥ Miłość wisi w powietrzu ♥"
		},
		ar = {
			guide = {
				regularMouse = {
					".اجمع السم وإحضاره إلى قلوب ملائكة الحب بالضغط على مفتاح المسافة",
					".لاتجعل سهام الحب تلمسك.سوف تصلك بلاعب اخر"
				},
				linkedMouse = {
					".اجمع رسائل الحب"
				},
				cupid = {
					".انقر لاطلاق سهام الحب. أضرب لاعبين لربطهما مع بعض.",
					"!لا تسمح للاعبين غير المرتبطين بتسميم قلبك"
				},
			},

			cupid = {
				transform = "!أنت الآن ملاك حب",
				hit = "!<B>%s</B> سهمك اصاب",
				link = "!<B>%s</B> و <B>%s</B> لقد قمت بربط اللاعبين ",
			},

			item = {
				regularMouse = ":الجرعات تم جمعها",
				linkedMouse = ":رسائل الحب تم جمعها",
				cupid = ":مجموع اللاعبين الذين وقعوا في الحب"
			},

			credit = "♥ الحب في الأجواء ♥ %sوالتفكير الرائع لـ %s & %s لصنع الشفرة والاكواد بشغف, والفن الجميل %s الشكر لـ"
		},
	}
	translations.pt = translations.br

	translation = translations[tfm.get.room.community] or translations.en

	for k, v in next, translation.guide do
		translation.guide[k] = "• " .. tbl_concat(v, "\n• ")
	end
	translation.credit = str_format(translation.credit, module.team.developer,
		module.team.artist[1], module.team.artist[2], module.team.creative)
end

--[[ Data ]]--
-- Laagaadoo's DataHandler
local DataHandler, playerCache = { }, { }
do
	DataHandler.__index = DataHandler

	DataHandler.new = function(moduleID, structure)
		local structureIndexes = { }
		for k, v in next, structure do
			structureIndexes[v.index] = k
			v.type = v.type or type(v.default)
		end

		return setmetatable({
			playerData = { },
			moduleID = moduleID,
			structure = structure,
			structureIndexes = structureIndexes,
			otherPlayerData = { },
			hasDataChanged = { }
		}, DataHandler)
	end

	local extractPlayerData = function(self, dataStr)
		local i, module, j = str_match(dataStr, "()" .. self.moduleID .. "=(%b{})()")
		if i then
			return module, (str_sub(dataStr, 1, i - 1) .. str_sub(dataStr, j + 1))
		end
		return nil, dataStr
	end

	local replaceComma = function(str)
		return str_gsub(str, ',', '\0')
	end

	local getDataNameById = function(structure, index)
		for k, v in next, structure do
			if v.index == index then
				return k
			end
		end
	end

	local strToTable

	strToTable = function(str)
		local out, index = { }, 0

		str = str_gsub(str, "%b{}", replaceComma)

		local tbl
		for value in str_gmatch(str, "[^,]+") do
			value = str_gsub(value, "%z", ',')

			tbl = str_match(value, "^{(.-)}$")

			index = index + 1
			if tbl then
				out[index] = strToTable(tbl)
			else
				out[index] = tonumber(value) or value
			end
		end

		return out
	end

	local getDataValue = function(value, valueType, valueName, valueDefault)
		if valueType == "boolean" then
			if value then
				value = (value == '1')
			else
				value = valueDefault
			end
		elseif valueType == "table" then
			value = str_match(value or '', "^{(.-)}$")
			value = value and strToTable(value) or valueDefault
		else
			if valueType == "number" then
				value = value and tonumber(value, 16)
			elseif valueType == "string" and value then
				value = str_match(value, "^\"(.-)\"$")
			end
			value = value or valueDefault
		end

		return value
	end

	local handleModuleData = function(self, playerName, structure, moduleData)
		local playerData = self.playerData[playerName]
		local valueName

		local dataIndex = 1
		if #moduleData > 0 then
			moduleData = str_gsub(moduleData, "%b{}", replaceComma)

			for value in str_gmatch(moduleData, "[^,]+") do
				value = str_gsub(value, "%z", ',')

				valueName = getDataNameById(structure, dataIndex)
				playerData[valueName] = getDataValue(value, structure[valueName].type, valueName,
					structure[valueName].default)
				dataIndex = dataIndex + 1
			end
		end

		local higherIndex = #self.structureIndexes
		if dataIndex <= higherIndex then
			for i = dataIndex, higherIndex do
				valueName = getDataNameById(structure, i)
				playerData[valueName] = getDataValue(nil, structure[valueName].type, valueName,
					structure[valueName].default)
			end
		end
	end

	DataHandler.newPlayer = function(self, playerName, data)
		data = data or ''

		self.playerData[playerName] = { }

		local module, otherData = extractPlayerData(self, data)
		self.otherPlayerData[playerName] = otherData

		handleModuleData(self, playerName, self.structure, (module and str_sub(module, 2, -2) or ''))

		return self
	end

	local tblToStr
	local transformType = function(valueType, index, str, value)
		if valueType == "number" then
			index = index + 1
			str[index] = str_format("%x", value)
		elseif valueType == "string" then
			index = index + 1
			str[index] = '"'
			index = index + 1
			str[index] = value
			index = index + 1
			str[index] = '"'
		elseif valueType == "boolean" then
			index = index + 1
			str[index] = (value and '1' or '0')
		elseif valueType == "table" then
			index = index + 1
			str[index] = '{'
			index = index + 1
			str[index] = tblToStr(value)
			index = index + 1
			str[index] = '}'
		end
		return index
	end

	tblToStr = function(tbl)
		local str, index = { }, 0

		local valueType
		for k, v in next, tbl do
			index = transformType(type(v), index, str, v)
			index = index + 1
			str[index] = ','
		end

		if str[index] == ',' then
			str[index] = ''
		end

		return tbl_concat(str)
	end

	local dataToStr = function(self, playerName)
		local str, index = { self.moduleID, "={" }, 2

		local playerData = self.playerData[playerName]
		local structureIndexes = self.structureIndexes
		local structure = self.structure

		local valueName, valueType, value
		for i = 1, #structureIndexes do
			valueName = structureIndexes[i]
			index = transformType(structure[valueName].type, index, str, playerData[valueName])
			index = index + 1
			str[index] = ','
		end

		if str[index] == ',' then
			str[index] = '}'
		else
			str[index + 1] = '}'
		end

		return tbl_concat(str)
	end

	DataHandler.dumpPlayer = function(self, playerName)
		local otherPlayerData = self.otherPlayerData[playerName]
		if otherPlayerData == '' then
			return dataToStr(self, playerName)
		else
			return dataToStr(self, playerName) .. "," .. otherPlayerData
		end
	end

	DataHandler.get = function(self, playerName, valueName)
		return self.playerData[playerName][valueName]
	end

	DataHandler.set = function(self, playerName, valueName, newValue, sum, _forceSave)
		self.hasDataChanged[playerName] = true
		playerName = self.playerData[playerName]
		if sum then
			playerName[valueName] = playerName[valueName] + newValue
		else
			playerName[valueName] = newValue
		end
		return self
	end

	DataHandler.save = function(self, playerName)
		if self.hasDataChanged[playerName] then
			self.hasDataChanged[playerName] = nil

			system.savePlayerData(playerName, self:dumpPlayer(playerName))
		end
		return self
	end
end

local timer = { }
do
	timer.start = function(self, callback, ms, times, ...)
		local t = self._timers
		t._count = t._count + 1

		t[t._count] = {
			id = t._count,
			callback = callback,
			args = { ... },
			defaultMilliseconds = ms,
			milliseconds = ms,
			times = times
		}
		t[t._count].args[#t[t._count].args + 1] = t[t._count]

		return t._count
	end

	timer.delete = function(self, id)
		local ts = self._timers
		ts[id] = nil
		ts._deleted = ts._deleted + 1
	end

	timer.loop = function(self)
		local ts = self._timers
		if ts._deleted >= ts._count then return end

		local t
		for i = 1, ts._count do
			t = ts[i]
			if t then
				t.milliseconds = t.milliseconds - 500
				if t.milliseconds <= 0 then
					t.milliseconds = t.defaultMilliseconds
					t.times = t.times - 1

					t.callback(tbl_unpack(t.args))

					if t.times == 0 then
						self:delete(i)
					end
				end
			end
		end
	end

	timer.refresh = function()
		timer._timers = {
			_count = 0,
			_deleted = 0
		}
	end
	timer.refresh()
end

local playerData = DataHandler.new(module.name, {
	rewards = {
		index = 1,
		default = 0
	},
	linkedMice = {
		index = 2,
		default = 0
	},
	collectedSolo = {
		index = 3,
		default = 0
	},
	collectedLinked = {
		index = 4,
		default = 0
	}
})

local images, consumables

local loadAllImages
loadAllImages = function(playerName, _src)
	for k, v in next, (_src or images) do
		if type(v) == "table" then
			loadAllImages(playerName, v)
		else
			tfm.exec.removeImage(tfm.exec.addImage(v, "_0", -10000, -10000, playerName))
		end
	end
end

local isEventWorkingFor = function(playerName, ignoreDeath)
	local cache = playerCache[playerName]

	if cache and cache.isDataLoaded and cache.class and (ignoreDeath or not cache.isDead) then
		return cache
	end
end

do
	local giveConsumables = tfm.exec.giveConsumables
	tfm.exec.giveConsumables = function(playerName, id, quantity)
		if id == consumables.fur then
			for i = 1, quantity do
				system.giveEventGift(playerName, module.reward.fur)
			end
		else
			return giveConsumables(playerName, id, quantity)
		end
	end
end

--[[ API ]]--
local table_random = function(t)
	local index = math_random(#t)
	return t[index], index
end

local table_keys = function(t)
	local tbl, index = { }, 0

	for key in next, t do
		index = index + 1
		tbl[index] = key
	end

	return tbl
end

local table_shuffle = function(tbl)
	local rand
	for i = #tbl, 1, -1 do
		rand = math_random(i)
		tbl[i], tbl[rand] = tbl[rand], tbl[i]
	end
end

local math_pythagoras = function(x, y, cx, cy, cr)
	x = x - cx
	x = x * x
	y = y - cy
	y = y * y
	cr = cr * cr
	return x + y < cr
end

local isValidPlayer = function(playerName)
	playerName = tfm.get.room.playerList[playerName]
	return playerName.id > 0 -- Is not souris
		and (time() - playerName.registrationDate) >= (3 * 60 * 60 * 24 * 1000) -- Player 3+ days
end

--[[ Tables & Enums ]]--
local regularMouse, linkedMouse, cupid, cupidHeart = { }, { }, { }, { }

images = {
	collectibles = {
		[regularMouse] = "17e6d7132d7.png",
		[linkedMouse] = "17e6d717f5b.png"
	},
	cupidHeart = {
		-- Unhealthy first
		[1] = "17e6cfe335d.png",
		[2] = "17e6cfd9b5b.png",
		[3] = "17e6cfde75c.png",
		[4] = "17e6cfd4f5d.png",
		[5] = "17e6cfc6a5d.png",
		[6] = "17e6cfc1e9d.png",
		[7] = "17e6cfcb65f.png",
		[8] = "17e6cfd02b2.png",
	},
	hpHeart = "17d4a8366e7.png",
	banner = {
		[regularMouse] = "17e6fa39638.png",
		[cupid] = "17e6fa342d1.png"
	}
}

consumables = {
	fur = 666,
	any = {
		2256, 2513, 2514, -- Brushes
		3, -- Firework
		2241, -- Postcards
		2378, -- leaves
		2234, -- Mic
		2346, -- Petals
		2232, -- Rainbow
		2250, 20 -- Throwables
	}
}

local interface = {
	heartHP = 100
}

local objectUpdateCallbacks, collectibleTypeByObjectType

--[[ Functions ]]--
local getMapElements = function(attribute)
	local objects, index, tmpObject = { }, 0

	for data in str_gmatch(tfm.get.room.xmlMapInfo.xml, "<" .. attribute .. " (.-)/>") do
		index = index + 1
		objects[index] = { }
		tmpObject = objects[index]

		for attributeName, _, value in str_gmatch(data, "([%w-_]+)=([\"'])(.-)%2") do
			tmpObject[attributeName] = tonumber(value) or value
		end
	end

	return objects, index
end

local populateCollectiblePositions = function()
	local objects, totalObjects = getMapElements('O')

	local tmpObject, tmpCollectibles
	for o = 1, totalObjects do
		tmpObject = objects[o]

		tmpCollectibles = collectibleTypeByObjectType[tmpObject.C]
		if tmpCollectibles then
			tmpCollectibles[#tmpCollectibles + 1] = {
				x = tmpObject.X,
				y = tmpObject.Y
			}
		end
	end

	for _, collectibles in next, collectibleTypeByObjectType do
		collectibles._count = #collectibles
	end
end

local displayBonuses = function(playerName, collectibleType, bonusIDs)
	local bonusList
	if bonusIDs then
		bonusList = bonusIDs
	else
		bonusList = playerCache[playerName].class
		if not bonusList then return end
		bonusList = bonusList.bonusIDs
	end

	local collectibles, tmpCollectible, tmpImg = collectibleType.collectibles

	for c = 1, collectibles._count do
		tmpCollectible = collectibles[c]

		tmpImg = tfm.exec.addImage(images.collectibles[collectibleType], "!0", tmpCollectible.x,
			tmpCollectible.y, playerName, nil, nil, nil, nil, 0.5, 0.5)
		tfm.exec.addBonus(0, tmpCollectible.x, tmpCollectible.y, tmpImg, 0, false, playerName)

		bonusList[tmpImg] = {
			x = tmpCollectible.x,
			y = tmpCollectible.y
		}
	end
end

local removeAllBonuses = function(playerName)
	local bonusList = playerCache[playerName].class
	if not bonusList then return end

	for id in next, bonusList.bonusIDs do
		tfm.exec.removeImage(id)
		tfm.exec.removeBonus(id, playerName)
	end
	bonusList.bonusIDs = { }
end

local getTotalCupidsAndHearts = function(_totalPlayers, _totalCupids)
	local totalCupids = math_max(1, _totalCupids or math_min(#cupidHeart.collectibles - 1,
		math_max(1, math_ceil(_totalPlayers / module.oneCupidPerNPlayers))))
		--math_max(1, math_floor((_totalPlayers / module.oneCupidPerNPlayers) + 0.5))))

	local totalHearts = math_min(totalCupids * module.nHeartsPerCupid, #cupidHeart.collectibles - 1)

	return totalCupids, totalHearts
end

local setDamageByPoisonOrDestroy = function(totalPlayers, totalCupids, totalCollectibles)
	local damageByHeartPoison = math_max(6, 45 - totalPlayers)
	regularMouse.minPoisonDamage = damageByHeartPoison * 0.8
	regularMouse.maxPoisonDamage = damageByHeartPoison * 1.2

	local damageByDestroyedHeart = math_max(15,
		32 - ((totalCollectibles / module.nHeartsPerCupid) * totalCupids))
	cupidHeart.minCupidDamage = damageByDestroyedHeart * 0.8
	cupidHeart.maxCupidDamage = damageByDestroyedHeart * 1.2
end

local displayPopup = function()
	local tmpClass
	for playerName, cache in next, playerCache do
		tmpClass = cache.class
		if images.banner[tmpClass.__index] then
			tmpClass.popupId = tfm.exec.addImage(images.banner[tmpClass.__index], "&1", 400, 215,
				playerName, nil, nil, nil, 0.9, 0.5, 0.5)
		end
	end
end

local removePopup = function()
	for playerName, cache in next, playerCache do
		if cache.class and cache.class.popupId then
			tfm.exec.removeImage(cache.class.popupId)
		end
	end
end

local validateReward = function(reward, expectedValue, currentValue, playerName)
	local rewards = playerData:get(playerName, "rewards")
	if band(reward[2], rewards) > 0 then return end

	if expectedValue > currentValue then return end
	system.giveEventGift(playerName, reward[1])

	playerData
		:set(playerName, "rewards", rewards + reward[2])
		:save(playerName)

	tfm.exec.chatMessage("<VI>" .. translation.credit, playerName)

	tfm.exec.giveConsumables(playerName, consumables.fur, 5)
	for _ = 1, 3 do
		tfm.exec.giveConsumables(playerName, table_random(consumables.any), math_random(1, 3))
	end
end

local selectCupids
do
	local selectRandomWithWeight
	selectRandomWithWeight = function(weights, total)
		local result, sum = math_random(total), 0

		for k, v in next, weights do
			sum = sum + v
			if sum > result then
				return k
			end
		end

		return selectRandomWithWeight(weights, total)
	end

	local getPlayerStage = function(playerName)
		local rewards = playerData:get(playerName, "rewards")

		if band(module.reward.badge[2], rewards) > 0 then -- Already has the badge
			return 1200
		elseif band(module.reward.title.willbriemine[2]
			+ module.reward.title.heartbreaker[2], rewards) > 0 then -- Has both titles

			local totalLinkedMice = playerData:get(playerName, "linkedMice")
			if totalLinkedMice >= module.totalLinkedSoulsForReward * 0.8 then -- miss .2 to complete
				return 7500
			end
			return 5500
		elseif band(module.reward.title.willbriemine[2], rewards) > 0
			or band(module.reward.title.heartbreaker[2], rewards) > 0 then -- Has only one title
			return 2800
		else -- Doesn't have any title
			return 2150
		end
	end

	selectCupids = function(totalCupids)
		local cachedPlayers = table_keys(playerCache)

		local players, playerWeights = { }, { }

		local totalWeight = 0
		for playerName = 1, #cachedPlayers do
			playerName = cachedPlayers[playerName]

			if isValidPlayer(playerName) then
				playerWeights[playerName] = getPlayerStage(playerName)
				totalWeight = totalWeight + playerWeights[playerName]
			end
		end

		local selectedPlayers = { }

		local playerName
		for t = 1, totalCupids do
			playerName = selectRandomWithWeight(playerWeights, totalWeight)

			selectedPlayers[playerName] = true

			totalWeight = totalWeight - playerWeights[playerName]
			playerWeights[playerName] = nil
		end

		return selectedPlayers
	end
end

local setClasses = function()
	-- Check if all data is loaded
	local player, tmpPlayer = next(playerCache)
	while player do
		tmpPlayer = next(playerCache, player)

		if not playerCache[player].isDataLoaded then
			tfm.exec.killPlayer(player)
			playerCache[player] = nil
		end

		player = tmpPlayer
	end

	-- Only alive players
	local cachedPlayers = table_keys(playerCache)
	local totalPlayers = #cachedPlayers

	local totalCupids, totalHearts = getTotalCupidsAndHearts(totalPlayers)

	local cupidPlayers = selectCupids(totalCupids)

	for playerName = 1, totalPlayers do
		playerName = cachedPlayers[playerName]

		playerCache[playerName].class =
			(cupidPlayers[playerName] and cupid.new or regularMouse.new)(playerName)
	end

	setDamageByPoisonOrDestroy(totalPlayers -  totalCupids, totalCupids,
		regularMouse.collectibles._count)
	cupidHeart.display(totalHearts)

	-- Display popups
	displayPopup()
	timer:start(removePopup, module.removePopupAfterNSeconds, 1)
end

local saveAll = function()
	for playerName in next, playerCache do
		playerData:save(playerName)
	end
end

--[[ Classes ]]--
-- regularMouse
do
	regularMouse.__index = regularMouse

	regularMouse.collectibles = {
		_count = 0
	}

	regularMouse.minPoisonDamage = 0
	regularMouse.maxPoisonDamage = 0

	regularMouse.new = function(playerName)
		local bonusIDs = { }

		removeAllBonuses(playerName) -- is needed ?
		displayBonuses(playerName, regularMouse, bonusIDs)

		system.bindKeyboard(playerName, 32, true, true)

		tfm.exec.chatMessage("<VP>" .. translation.guide.regularMouse, playerName)
		tfm.exec.chatMessage(str_format("<V>[•] <T>%s %s/%s", translation.item.regularMouse,
			playerData:get(playerName, "collectedSolo"), module.totalPotionsForReward), playerName)

		return setmetatable({
			playerName = playerName,

			bonusIDs = bonusIDs,

			collected = false,
			collectedImg = nil,

			popupId = nil
		}, regularMouse)
	end

	regularMouse.poisonedHeart = function(self)
		local collectedSolo = playerData:get(self.playerName, "collectedSolo") + 1
		playerData:set(self.playerName, "collectedSolo", collectedSolo)

		validateReward(module.reward.title.heartbreaker, module.totalPotionsForReward,
			collectedSolo, self.playerName)

		if collectedSolo == 3 then
			tfm.exec.giveConsumables(self.playerName, consumables.fur, 5)
		end

		tfm.exec.chatMessage(str_format("<V>[•] <T>%s %s/%s", translation.item.regularMouse,
			collectedSolo, module.totalPotionsForReward), self.playerName)
	end

	regularMouse.keyboard = function(self, playerName, key, x, y, isDown)
		if key ~= 32 then return end
		if not self.collected then return end

		local hearts = cupidHeart.list

		local tmpHeart, destroyedHeart
		for heart = 1, hearts._count do
			tmpHeart = hearts[heart]

			if math_pythagoras(x, y, tmpHeart.x, tmpHeart.y, 80) then
				tfm.exec.removeImage(self.collectedImg)
				self.collectedImg = nil

				self.collected = false

				destroyedHeart = tmpHeart:damage(
					math_random(regularMouse.minPoisonDamage, regularMouse.maxPoisonDamage), heart)
				if destroyedHeart then
					tfm.exec.giveConsumables(playerName, consumables.fur, 1)
					tfm.exec.giveConsumables(playerName, table_random(consumables.any),
						math_random(1, 3))
				end

				self:poisonedHeart()

				tfm.exec.playEmote(playerName, 26)
				break
			end
		end
	end

	regularMouse.bonus = function(self, playerName, id, bonusPos)
		if self.collected then
			-- Can't collect more than one

			-- Reposition the bonus
			timer:start(tfm.exec.addBonus, 3000, 1, images.collectibles[self.__index], bonusPos.x,
				bonusPos.y, id, 0, false, playerName)

			return
		end

		self.collected = true

		tfm.exec.removeImage(id)
		self.bonusIDs[id] = nil

		self.collectedImg = tfm.exec.addImage(images.collectibles[regularMouse],
			"$" .. self.playerName, 0, 0, nil, 0.5, 0.5, nil, nil, 0.5, 3)
	end

	regularMouse.death = function(self)
		if self.collectedImg then
			tfm.exec.removeImage(self.collectedImg)
		end

		for _, cupidName in next, cupid.list do
			if playerCache[cupidName].class.hitPlayer == self.playerName then
				playerCache[cupidName].class.hitPlayer = nil
			end
		end
	end
end

-- linkedMouse
do
	linkedMouse.__index = linkedMouse

	linkedMouse.collectibles = {
		_count = 0
	}

	linkedMouse.new = function(playerName, partnerName)
		local bonusIDs = { }

		eventPlayerDied(playerName, true) -- unattach player from other cupids

		removeAllBonuses(playerName)
		displayBonuses(playerName, linkedMouse, bonusIDs)

		system.bindKeyboard(playerName, 32, true, false)

		tfm.exec.chatMessage("<R>" .. translation.guide.linkedMouse, playerName)
		tfm.exec.chatMessage(str_format("<V>[•] <VI>%s %s/%s", translation.item.linkedMouse,
			playerData:get(playerName, "collectedLinked"), module.totalLoveLettersForReward),
			playerName)

		tfm.exec.giveConsumables(playerName, table_random(consumables.any), math_random(2, 3))

		return setmetatable({
			playerName = playerName,

			bonusIDs = bonusIDs,
		}, linkedMouse)
	end

	linkedMouse.bonus = function(self, playerName, id, bonusPos)
		tfm.exec.removeImage(id)
		self.bonusIDs[id] = nil

		local collectedLinked = playerData:get(playerName, "collectedLinked") + 1
		playerData:set(playerName, "collectedLinked", collectedLinked)

		validateReward(module.reward.title.willbriemine, module.totalLoveLettersForReward,
			collectedLinked, playerName)

		if collectedLinked == 1 then
			tfm.exec.giveConsumables(playerName, consumables.fur, 5)
		end

		tfm.exec.chatMessage(str_format("<V>[•] <VI>%s %s/%s", translation.item.linkedMouse,
			collectedLinked, module.totalLoveLettersForReward), playerName)
	end
end

-- cupid
do
	cupid.__index = cupid

	cupid.list = { }
	cupid.arrows = { }
	cupid.spawn = {
		x = nil,
		y = nil
	}

	cupid.display = function()
		ui.setShamanName(tbl_concat(cupid.list, " - "))
	end

	cupid.keyboard = regularMouse.keyboard

	cupid.updateArrow = function(id, object)
		local tmpArrow, tmpPlayerCache, tmpCupid = cupid.arrows[id]
		if tmpArrow and tmpArrow.noHit then
			for playerName, data in next, tfm.get.room.playerList do
				tmpPlayerCache = isEventWorkingFor(playerName)
				if tmpPlayerCache and tmpPlayerCache.class.__index == regularMouse then
					if math_pythagoras(data.x, data.y, object.x, object.y, 55) then
						local tmpCupid = playerCache[tmpArrow.playerName].class
						if tmpCupid.hitPlayer ~= playerName then
							tmpArrow.noHit = false

							if not tmpCupid.hitPlayer then
								tmpCupid.hitPlayer = playerName
								tfm.exec.chatMessage(str_format("<CH2>" .. translation.cupid.hit,
									playerName), tmpCupid.playerName)
							else
								tfm.exec.linkMice(tmpCupid.hitPlayer, playerName)
								tmpCupid:linkedPlayers(tmpCupid.hitPlayer, playerName)

								tmpPlayerCache.class, playerCache[tmpCupid.hitPlayer].class =
									linkedMouse.new(playerName), linkedMouse.new(tmpCupid.hitPlayer)

								tmpCupid.hitPlayer = nil
							end

							tfm.exec.displayParticle(5, data.x, data.y, nil, -2)

							return
						end
					end
				end
			end
		end
	end

	cupid.new = function(playerName)
		tfm.exec.movePlayer(playerName, cupid.spawn.x, cupid.spawn.y)

		system.bindMouse(playerName, true)
		system.bindKeyboard(playerName, 32, true, true)

		tfm.exec.chatMessage("<CH2><B>" .. translation.cupid.transform .. "</B>", playerName)
		tfm.exec.chatMessage("<PS>" .. translation.guide.cupid, playerName)
		tfm.exec.chatMessage(str_format("<V>[•] <S>%s %s/%s", translation.item.cupid,
			playerData:get(playerName, "linkedMice") * 2, module.totalLinkedSoulsForReward * 2),
			playerName)

		cupid.list[#cupid.list + 1] = playerName
		cupid.display()

		tfm.exec.giveConsumables(playerName, consumables.fur, 1)
		tfm.exec.giveConsumables(playerName, table_random(consumables.any), math_random(2, 3))

		local this = setmetatable({
			playerName = playerName,

			hp = 100,
			totalHearts = 0,
			hearts = { },

			arrowId = nil,
			hitPlayer = nil,

			popupId = nil,

			linkedMice = { },
		}, cupid)

		this:displayHealth()

		return this
	end

	cupid.getTotalHearts = function(self)
		local total = math_min(10, (self.hp / 10) - ((self.hp / 10) % 1) + 1)

		if total ~= self.totalHearts then
			local oldTotal = self.totalHearts
			self.totalHearts = total
			return true, total, oldTotal
		end

		return false, total
	end

	cupid.displayHealth = function(self)
		local _, totalHearts = self:getTotalHearts()

		local index = 0
		for h = -5, totalHearts - 6 do
			index = index + 1
			self.hearts[index] = tfm.exec.addImage(images.hpHeart, "$" .. self.playerName, nil, -38,
				nil, nil, nil, nil, nil, -h * 0.8)
		end
	end

	cupid.removeHeart = function(self, totalHearts)
		local hearts = self.hearts

		for h = #hearts, #hearts - totalHearts + 1, -1 do
			tfm.exec.removeImage(hearts[h])
			hearts[h] = nil
		end
	end

	cupid.damage = function(self, damage)
		self.hp = self.hp - damage

		if self.hp <= 0 then
			tfm.exec.killPlayer(self.playerName)
			self:death()
			return
		end

		local removeHeart, total, oldTotal = self:getTotalHearts()
		if removeHeart then
			self:removeHeart(oldTotal - total)
		end
	end

	cupid.linkedPlayers = function(self, mouse1, mouse2)
		local totalLinkedMice = playerData:get(self.playerName, "linkedMice") + 1
		playerData:set(self.playerName, "linkedMice", totalLinkedMice)

		validateReward(module.reward.badge, module.totalLinkedSoulsForReward, totalLinkedMice,
			self.playerName)

		self.linkedMice[#self.linkedMice + 1] = mouse1
		self.linkedMice[#self.linkedMice + 1] = mouse2

		tfm.exec.chatMessage(str_format("<CH2>" .. translation.cupid.link, mouse1, mouse2),
			self.playerName)

		if totalLinkedMice == 1 then
			tfm.exec.giveConsumables(self.playerName, consumables.fur, 5)
		end

		tfm.exec.chatMessage(str_format("<V>[•] <S>%s %s/%s", translation.item.cupid,
			totalLinkedMice * 2, module.totalLinkedSoulsForReward * 2), self.playerName)
	end

	local removeArrow = function(self)
		tfm.exec.removeObject(self.arrowId)
		cupid.arrows[self.arrowId] = nil
		self.arrowId = nil
	end

	cupid.click = function(self, playerName, px, py, x, y)
		if self.arrowId then return end

		local angle = math_atan2(y - py, x - px)
		local cos, sin = math_cos(angle), math_sin(angle)

		self.arrowId = tfm.exec.addShamanObject(35, px + cos * 40, py + sin * 40, math_deg(angle),
			cos * 20, sin * 20)

		cupid.arrows[self.arrowId] = {
			playerName = playerName,
			noHit = true
		}
		timer:start(removeArrow, 2500, 1, self)

		tfm.exec.playEmote(playerName, 14)
	end

	cupid.death = function(self)
		-- Kill linked mice
		for m = 1, #self.linkedMice do
			tfm.exec.killPlayer(self.linkedMice[m])
		end

		-- Visual
		for c = 1, #cupid.list do
			if cupid.list[c] == self.playerName then
				tbl_remove(cupid.list, c)
				break
			end
		end
		cupid.display()
	end
end

-- cupidHeart
do
	cupidHeart.__index = cupidHeart

	cupidHeart.collectibles = {
		_count = 0
	}

	cupidHeart.list = {
		_count = 0
	}

	cupidHeart.minCupidDamage = 0
	cupidHeart.maxCupidDamage = 0

	local totalStates = #images.cupidHeart
	cupidHeart.new = function(x, y, originalIndex)
		local this = setmetatable({
			hp = 100,

			imageState = nil,
			imageId = nil,

			x = x,
			y = y,

			originalIndex = originalIndex
		}, cupidHeart)

		this:displayImage(true)
		this:displayHealth()

		local list = cupidHeart.list
		list._count = list._count + 1
		list[list._count] = this
		list[-originalIndex] = true

		return this
	end

	cupidHeart.getNewPosition = function()
		local tmpPos, tmpIndex
		repeat
			tmpPos, tmpIndex = table_random(cupidHeart.collectibles)
		until not cupidHeart.list[-tmpIndex]

		return tmpPos, tmpIndex
	end

	cupidHeart.displayImage = function(self, forceUpdate)
		local newState = math_ceil(self.hp / (100 / totalStates))
		if not forceUpdate and self.imageState == newState then return end
		self.imageState = newState

		if self.imageId then
			tfm.exec.removeImage(self.imageId)
		end

		self.imageId = tfm.exec.addImage(images.cupidHeart[self.imageState], "_100", self.x, self.y,
			nil, nil, nil, nil, nil, 0.5, 0.5)
	end

	cupidHeart.removeHealth = function(self)
		ui.removeTextArea(interface.heartHP + self.originalIndex)
		ui.removeTextArea(-(interface.heartHP + self.originalIndex))
	end

	cupidHeart.displayHealth = function(self)
		local width = 30
		local x = self.x - (width / 2)
		local hpWidth = self.hp * (width / 100)

		ui.addTextArea(interface.heartHP + self.originalIndex, '', nil, x - 1, self.y + 28,
			width + 2, 5, 0x6BAD2C, 1, 1, false)
		ui.addTextArea(-(interface.heartHP + self.originalIndex), '', nil, x, self.y + 30, hpWidth,
			1, 0xE27C7E, 0xE27C7E, 1, false)
	end

	cupidHeart.display = function(total)
		local tmpPos, tmpIndex
		for h = 1, total do
			tmpPos, tmpIndex = cupidHeart.getNewPosition()
			cupidHeart.new(tmpPos.x, tmpPos.y, tmpIndex)
		end
	end

	cupidHeart.destroy = function(self, index)
		local list = cupidHeart.list

		tbl_remove(list, index)
		list._count = list._count - 1

		cupidHeart.reallocateAll()
		list[-self.originalIndex] = nil

		tfm.exec.removeImage(self.imageId)
		self:removeHealth()
	end

	cupidHeart.damage = function(self, damage, index)
		self.hp = self.hp - damage
		if self.hp <= 0 then
			self:destroy(index)

			-- Damage cupids
			local tmpCupid
			for c = 1, #cupid.list do
				tmpCupid = playerCache[cupid.list[c]]

				if tmpCupid and not tmpCupid.isDead then
					tmpCupid.class:damage(
						math_random(cupidHeart.minCupidDamage, cupidHeart.maxCupidDamage))
				end
			end

			-- Spawn new hearts
			if cupidHeart.list._count == 0 then
				local _, totalHearts = getTotalCupidsAndHearts(nil, #cupid.list)

				for h = 1, totalHearts do
					timer:start(cupidHeart.display, 1500 * h, 1, 1)
				end
			end

			tfm.exec.displayParticle(12, self.x, self.y)

			return true
		else
			self:displayImage()
			self:displayHealth()

			return false
		end
	end

	cupidHeart.reallocateAll = function()
		local list = cupidHeart.list

		local tmpPos, tmpIndex, tmpHeart
		for heart = 1, list._count do
			tmpPos, tmpIndex = cupidHeart.getNewPosition()

			tmpHeart = list[heart]
			list[-tmpHeart.originalIndex] = nil

			tmpHeart:removeHealth()
			tmpHeart.originalIndex = tmpIndex
			list[-tmpIndex] = true

			tmpHeart.x = tmpPos.x
			tmpHeart.y = tmpPos.y

			tmpHeart:displayImage(true)
			tmpHeart:displayHealth()
		end
	end
end

objectUpdateCallbacks = {
	[35] = cupid.updateArrow
}

collectibleTypeByObjectType = {
	[11] = regularMouse.collectibles, -- B nail
	[14] = linkedMouse.collectibles, -- V nail
	[22] = cupidHeart.collectibles -- C nail
}

--[[ Events ]]--
local hasLoaded = false
eventNewGame = function()
	if hasLoaded then
		return system.exit()
	end
	hasLoaded = true

	tfm.exec.setGameTime(module.time)

	populateCollectiblePositions()

	local cupidSpawn = getMapElements("DC")[1]
	cupid.spawn.x = cupidSpawn.X
	cupid.spawn.y = cupidSpawn.Y

	local mapSettings = getMapElements("P")[1]
	if mapSettings.name ~= '' and mapSettings.author ~= '' then
		ui.setMapName("<CH2>" .. mapSettings.name .. " <BL>- <T>" .. mapSettings.author)
	else
		ui.setMapName(module.formalName)
	end

	for playerName in next, tfm.get.room.playerList do
		playerCache[playerName] = {
			isDataLoaded = false,
			isDead = false,

			class = nil
		}

		system.loadPlayerData(playerName)
		tfm.exec.lowerSyncDelay(playerName)
	end

	loadAllImages()
end

local settingClasses = false
eventPlayerDataLoaded = function(playerName, data)
	playerData:newPlayer(playerName, data)

	if not settingClasses then
		settingClasses = true
		timer:start(setClasses, 1500, 1)
	end

	playerCache[playerName].isDataLoaded = true
end

eventNewPlayer = function(playerName)
	loadAllImages(playerName)
	cupid.display()
end

eventMouse = function(playerName, x, y)
	local cache = isEventWorkingFor(playerName)
	if not cache then return end

	if cache.class.click then
		local player = tfm.get.room.playerList[playerName]
		cache.class:click(playerName, player.x, player.y, x, y)
	end
end

eventKeyboard = function(playerName, key, isDown, x, y)
	local cache = isEventWorkingFor(playerName)
	if not cache then return end

	if cache.class.keyboard then
		cache.class:keyboard(playerName, key, x, y, isDown)
	end
end

eventPlayerBonusGrabbed = function(playerName, id)
	local cache = isEventWorkingFor(playerName)
	if not cache then return end

	local class = cache.class
	if not class.bonusIDs or not class.bonusIDs[id] then return end

	if class.bonus then
		class:bonus(playerName, id, class.bonusIDs[id])
	end
end

local hasTriggeredRoundEnd, triggerRoundEnd = false, false
local eventRoundEnded = function()
	hasTriggeredRoundEnd = true
	tfm.exec.setGameTime(5)

	saveAll()

	tfm.exec.disableAutoNewGame(false)
end

eventLoop = function(currentTime, remainingTime)
	if (remainingTime < 1000 and currentTime > 5000) or triggerRoundEnd then
		if not hasTriggeredRoundEnd then
			return eventRoundEnded()
		end
	end

	for id, object in next, tfm.get.room.objectList do
		if objectUpdateCallbacks[object.type] then
			objectUpdateCallbacks[object.type](id, object)
		end
	end

	timer:loop()
end

eventPlayerDied = function(playerName, ignoreDeath)
	local cache = playerCache[playerName]
	if not cache then return end

	if not ignoreDeath then
		cache.isDead = true
	end

	if cache.class and cache.class.death then
		cache.class:death()
	end
end

eventPlayerLeft = function(playerName)
	local cache = isEventWorkingFor(playerName, true)
	if not cache then return end

	playerData:save(playerName)
end

--[[ Init ]]--
tfm.exec.disableAutoShaman()
tfm.exec.disableAutoNewGame()
tfm.exec.disableAutoTimeLeft()
tfm.exec.disableDebugCommand()
tfm.exec.disablePhysicalConsumables()

timer:start(function(timer)
	if not next(playerCache) then return end

	for _, p in next, playerCache do
		if not p.isDead then
			return
		end
	end

	timer.times = 0
	triggerRoundEnd = true
end, 2000, 0)

timer:start(saveAll, 30000, 0)

tfm.exec.newGame(table_random(module.maps))
